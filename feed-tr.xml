<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uğur “vigo” Özyılmazel</title>
  <subtitle>Bilgisayar Programcısı</subtitle>
  <id>https://ugur.ozyilmazel.com/blog/tr/</id>
  <link href="https://ugur.ozyilmazel.com/blog/tr/"/>
  <link href="https://ugur.ozyilmazel.com/feed-tr.xml" rel="self"/>
  <updated>2025-03-09T20:58:00+03:00</updated>
  <author>
    <name>Uğur “vigo” Özyılmazel</name>
  </author>
  <entry>
    <title>Ghostty macOS Terminal ve Bash Maceraları</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2025/03/09/ghostty-macos-terminal-ve-bash-maceralari/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2025/03/09/ghostty-macos-terminal-ve-bash-maceralari/</id>
    <published>2025-03-09T20:58:00+03:00</published>
    <updated>2025-03-10T10:07:49+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://ghostty.org/"&gt;Ghostty&lt;/a&gt; yeni nesil terminal client’ını denerken bir de baktım kendi
icadım olan bazı şeyler çalışmıyor! Önce problemin kimden ve nereden
kaynaklandığını bulmaya çalıştım.
&lt;/p&gt;

&lt;p&gt;Hatta ilk olarak Ghostty’nin forumunda sordum, neden böyle oluyor diye. Yine
garip bir sorun bir bana denk gelmişti&amp;hellip;&lt;/p&gt;

&lt;p&gt;Benim &lt;code&gt;PS1&lt;/code&gt;’de kullandığım küçük bir fonksiyonum var, son çalışan komut 
&lt;strong&gt;kaç saniye sürdü&lt;/strong&gt; ise onu görüyorum ve son &lt;code&gt;BASH EXIT CODE&lt;/code&gt;’u da buradan 
takip ediyorum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ .379841 - 0 ]
     ^      ^
    süre    last exit code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aslında amacım şu, bir komutu &lt;code&gt;time &amp;lt;command&amp;gt;&lt;/code&gt; gibi her seferinde çağırmaktansa
otomatik olarak olarak bunu prompt shell’imde göreyim dedim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time sleep &lt;/span&gt;2

real    0m2.022s
user    0m0.001s
sys 0m0.006s
&lt;span class="o"&gt;[&lt;/span&gt; 2.190589 - 0 &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bunu yapmak için;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;color_blue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s1"&gt;[0;0;34m'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;color_blink_red&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s1"&gt;[5;31m'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;color_off&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;last_exit_code
last_exit&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ex&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color_bold_blink_red&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;color_off&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;icon_timelapse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s1"&gt;E384'&lt;/span&gt; &lt;span class="c"&gt;# nerd font ikonu&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;CUSTOMER_TIMER
&lt;span class="nb"&gt;export &lt;/span&gt;TIMER_SHOW
timer_start&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;CUSTOMER_TIMER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CUSTOMER_TIMER&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;$EPOCHREALTIME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

timer_stop&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;TIMER_SHOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color_blue&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;icon_timelapse&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;bc &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;EPOCHREALTIME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CUSTOMER_TIMER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color_off&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - "&lt;/span&gt;
    &lt;span class="nb"&gt;unset &lt;/span&gt;CUSTOMER_TIMER
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"last_exit&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:+&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:+&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;timer_stop"&lt;/span&gt;
&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'timer_start'&lt;/span&gt; DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şeklinde küçük bir script’i &lt;code&gt;~/.bashrc&lt;/code&gt;’ime eklemiştim. Merak edenler için;
&lt;code&gt;PROMPT_COMMAND&lt;/code&gt; özel bir &lt;a href="https://tldp.org/HOWTO/Bash-Prompt-HOWTO/x264.html"&gt;environment variable&lt;/a&gt;.  Bash’e özel, 
yaptığı iş şu:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The contents of this variable are executed as a regular Bash command just 
before Bash displays a prompt. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yani Bash’in &lt;code&gt;PS1&lt;/code&gt;’i çalıştırmadan önce çalıştıracağı fonksiyonlar burada
yazıyor. macOS’un default Terminal.app’inde bu değişkeninin içinde ne yazdığına
bakarsak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;
last_exit&lt;span class="p"&gt;;&lt;/span&gt;_pyenv_virtualenv_hook&lt;span class="p"&gt;;&lt;/span&gt;_direnv_hook&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;update_terminal_cwd&lt;span class="p"&gt;;&lt;/span&gt;timer_stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;img class="shadow"  title="macOS Terminal.app ekranı" src="/public/images/posts/2025-03-09-macos-terminal.png" alt="macOS Terminal.app ekranı"&gt;&lt;/figure&gt;&lt;p&gt; macOS Terminal.app ekranı 
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;gibi fonksiyonları görürüz. Bu gördüğünüz değelerin bazılarını ben belirledim,
&lt;code&gt;last_exit&lt;/code&gt; ve &lt;code&gt;timer_stop&lt;/code&gt; elle eklediğim, &lt;code&gt;_pyenv_virtualenv_hook&lt;/code&gt; ise
&lt;code&gt;pyenv&lt;/code&gt; kurulumuyla geldi, keza &lt;code&gt;direnv&lt;/code&gt; kullandığım için &lt;code&gt;_direnv_hook&lt;/code&gt; da
ondan geldi. &lt;code&gt;history -a&lt;/code&gt; benim &lt;code&gt;history&lt;/code&gt; ayarlarımla ilgili. Yeni tab açınca
history’i hep güncel olarak kullanabiliyorum. Peki &lt;code&gt;update_terminal_cwd&lt;/code&gt;
nereden geldi?&lt;/p&gt;

&lt;p&gt;Bu macOS’un derinliklerinden geliyor; &lt;code&gt;/etc/bashrc&lt;/code&gt; bunu otomatik olarak
takıyor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# System-wide .bashrc file for interactive bash(1) shells.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PS1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
   return
fi

&lt;/span&gt;&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\h:\W \u\$ '&lt;/span&gt;
&lt;span class="c"&gt;# Make bash check its window size after a process completes&lt;/span&gt;
&lt;span class="nb"&gt;shopt&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; checkwinsize

&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"/etc/bashrc_&lt;/span&gt;&lt;span class="nv"&gt;$TERM_PROGRAM&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/etc/bashrc_&lt;/span&gt;&lt;span class="nv"&gt;$TERM_PROGRAM&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Eğer macOS Terminal.app’de &lt;code&gt;TERM_PROGRAM&lt;/code&gt; değişkenini yazdırırsanız;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$TERM_PROGRAM&lt;/span&gt;
Apple_Terminal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;görürsünüz. Yani aslında &lt;code&gt;/etc/bashrc_Apple_Terminal&lt;/code&gt; diye bir dosya var mı?
var. Dosyanın başından bir kısmını ekliyorum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$INSIDE_EMACS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;update_terminal_cwd&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# Identify the directory using a "file:" scheme URL, including&lt;/span&gt;
    &lt;span class="c"&gt;# the host name to disambiguate local vs. remote paths.&lt;/span&gt;
    :
    :
    &lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"update_terminal_cwd&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:+&lt;span class="p"&gt;; &lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şeklinde, eğer &lt;code&gt;emacs&lt;/code&gt; içinde değilseniz bu fonksiyonu dinamik olarak
oluşturuyor ve &lt;code&gt;PROMPT_COMMAND&lt;/code&gt;’a takıyor. Aslına olay şu; eğer o an
&lt;code&gt;PROMPT_COMMAND&lt;/code&gt; değişkeninin için boşsa öne ekliyor, doluysa araya &lt;code&gt;;&lt;/code&gt;
atıyor, yani:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;FOO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"lego&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FOO&lt;/span&gt;:+&lt;span class="p"&gt;; &lt;/span&gt;&lt;span class="nv"&gt;$FOO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;   &lt;span class="c"&gt;# şu an FOO diye bir değişken yok&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$FOO&lt;/span&gt;
lego

&lt;span class="nv"&gt;FOO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"bar&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FOO&lt;/span&gt;:+&lt;span class="p"&gt;; &lt;/span&gt;&lt;span class="nv"&gt;$FOO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;    &lt;span class="c"&gt;# FOO var ve içinde lego yazıyor, &lt;/span&gt;
                           &lt;span class="c"&gt;# bir tür += işlemi ama ; ayraç&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$FOO&lt;/span&gt;
bar&lt;span class="p"&gt;;&lt;/span&gt; lego
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;İlk gölü bu olaydan yedim. Neden? &lt;code&gt;update_terminal_cwd&lt;/code&gt; araya takılırken
&lt;code&gt;TERM_PROGRAM&lt;/code&gt; a göre karar veriliyor ya. Ghostty’i ilk açtığımda bu timer
işleri saçmaladı. Bir baktım ki &lt;code&gt;update_terminal_cwd&lt;/code&gt; diye bir şey yok
&lt;code&gt;PROMPT_COMMAND&lt;/code&gt; içinde:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Ghostty’de&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;
last_exit&lt;span class="p"&gt;;&lt;/span&gt;_pyenv_virtualenv_hook&lt;span class="p"&gt;;&lt;/span&gt;_direnv_hook&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="nt"&gt;-atimer_stop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;history -atimer_stop&lt;/code&gt; aradaki &lt;code&gt;;&lt;/code&gt; olmadığı için çatladı. Ben de eğer sonda
&lt;code&gt;;&lt;/code&gt; varsa ya da yoksa bir ayar çekmek gerektiği için, ki aynı sorun
&lt;strong&gt;Visual Studio Code&lt;/strong&gt;’da oldu, mecburen şu kodu ekledim. Aslına &lt;code&gt;TERM_PROGRAM&lt;/code&gt;’a
göre de kontrol edebilirdim ama ileride &lt;code&gt;iTerm&lt;/code&gt; kullansam onu da kontrol etmem
gerekecekti, onun yerine sondaki &lt;code&gt;;&lt;/code&gt; kontrol edeyim dedim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"last_exit&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:+&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# for vscode/ghostty terminal fix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:&lt;span class="p"&gt; -1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;";"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;timer_stop"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:+&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;timer_stop"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="c"&gt;# for vscode/ghostty terminal fix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şeklinde bir düzeltme yaptım. Bu geçen süreyi hesaplama mantığı da şu;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'timer_start'&lt;/span&gt; DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Her komut sonrası &lt;code&gt;timer_start&lt;/code&gt; çalışıyor, sonra &lt;code&gt;PS1&lt;/code&gt; çalışıp en son &lt;code&gt;timer_stop&lt;/code&gt;
devreye giriyor ve geçen süreyi ve son çalışan komutun hata kodunu &lt;code&gt;PS1&lt;/code&gt; 
içinde yazdırıyorum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[ &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{TIMER_SHOW}&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{last_exit_code} ]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mesela &lt;code&gt;ls foooooooooooooooooooooooooooooo&lt;/code&gt; desem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;foooooooooooooooooooooooooooooo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Promptumda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ .188104 - 2 ]
     ^      ^
    süre    last exit code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şeklinde görüyorum. Olmayan bir dizini listelemek istedim, hata kodu &lt;code&gt;2&lt;/code&gt;.
&lt;code&gt;PROMPT_COMMAND&lt;/code&gt; ayarını da yapınca ne güzel çalışıyor diye sevinirken bugün
ufak bir işim vardı, &lt;code&gt;cd&lt;/code&gt; yaptığım dizini text editörde açmak için;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;sites/
mate &lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;yaptım. &lt;code&gt;$_&lt;/code&gt; interaktif shell’de son argümanı temsil eder yani:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
/tmp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Komuta geçtiğim son argüman. Ben &lt;code&gt;mate $_&lt;/code&gt; (mate benim text editör) dediğim
an ekranda &lt;code&gt;timer_start&lt;/code&gt; yazdı ve sanki ben adı &lt;code&gt;timer_start&lt;/code&gt; olan bir dosyayı
açmaya çalışmışım gibi oldu.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timer_start&lt;/code&gt; fonksiyonu benim &lt;code&gt;trap&lt;/code&gt; ile çalıştırdığım bir şey. Yani son
geçilen argüman olmuş bir şekilde. Bir şekilde bash’in default davranışını
ezmişim ve nasıl ezdim ? nasıl çözerim bunu ? hiçbir fikrim yok&amp;hellip;&lt;/p&gt;

&lt;p&gt;Yaklaşık &lt;strong&gt;2 saat&lt;/strong&gt; kadar ChatGPT’deki bir kısım custom GPT’ler, Chat GPT’nin
kendisi, DeepSeek, GitHub Co-Pilot, bildiğim tüm LLM’lere başvurdum. Hepsi
totosundan sallama cevaplar verdi. Sonra eski dost google’a sordum. Stack
Overflow’da benzer sorunları yaşayan hatta birebir aynısı yaşayanlar vardı.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;trap&lt;/code&gt; &lt;code&gt;$_&lt;/code&gt;’u eziyor, yutuyor diye&amp;hellip;&lt;/p&gt;

&lt;p&gt;Bazı anlar vardır, çaresizlik içinde hiçbir cevap bulamadığınız, kime sorsam ?
kimden yardım alsam diye kara kara düşündüğünüz anlar&amp;hellip;&lt;/p&gt;

&lt;p&gt;Önce &lt;code&gt;$_&lt;/code&gt; bunun orijinal versiyonunu bir başka değişkene atıp en son &lt;code&gt;timer_stop&lt;/code&gt;
çağırıldığı zaman geri set etmek geldi ama buna izin vermiyor çünkü &lt;code&gt;_=$old_val&lt;/code&gt;
olmadı. &lt;/p&gt;

&lt;p&gt;Bir sürü farklı şeyler denedikten sonra aklıma deneme yanılma yapmak geldi ve
kodu şöyle değiştirdim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'timer_start "$_"'&lt;/span&gt; DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yani &lt;code&gt;timer_start&lt;/code&gt; günün sonunda bir fonksiyon, ben ona argüman olarak o an
&lt;code&gt;$_&lt;/code&gt; ne ise onu geçtim ve aslında son geçilen argüman yine o oldu. Ve büyük
bir sürpriz oldu, çalıştı&amp;hellip;&lt;/p&gt;

&lt;p&gt;Cuma akşamından beri &lt;a href="https://www.youtube.com/@yousuckatprogramming"&gt;ysap&lt;/a&gt; kanalını izliyorum, Bash bilgilerimi kontrol
ediyordum, Dave orada çok kullanıyor &lt;code&gt;$_&lt;/code&gt; durumunu, ben de eskiden kullanırdım
ama zaman içinde unutmuşum, video sayesinde bunu tekrar kullanmasam çok ciddi
bir sorunu kaçırmış olacaktım.&lt;/p&gt;

&lt;p&gt;Umarım meraklısının işine yarar bir yazı olmuştur. Kodun son hali:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;color_blue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s1"&gt;[0;0;34m'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;color_blink_red&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s1"&gt;[5;31m'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;color_off&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;

&lt;span class="nv"&gt;icon_timelapse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$'&lt;/span&gt;&lt;span class="se"&gt;\u&lt;/span&gt;&lt;span class="s1"&gt;E384'&lt;/span&gt; &lt;span class="c"&gt;# nerd font&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;last_exit_code
last_exit&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ex&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color_bold_blink_red&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;last_exit_code&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;color_off&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;CUSTOMER_TIMER
&lt;span class="nb"&gt;export &lt;/span&gt;TIMER_SHOW
timer_start&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;CUSTOMER_TIMER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CUSTOMER_TIMER&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;$EPOCHREALTIME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

timer_stop&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;TIMER_SHOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color_blue&lt;/span&gt;&lt;span class="k"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;icon_timelapse&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;bc &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;EPOCHREALTIME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CUSTOMER_TIMER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color_off&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - "&lt;/span&gt;
    &lt;span class="nb"&gt;unset &lt;/span&gt;CUSTOMER_TIMER
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"last_exit&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:+&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# for vscode/ghostty terminal fix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:&lt;span class="p"&gt; -1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;";"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;timer_stop"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;:+&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;timer_stop"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="c"&gt;# for vscode/ghostty terminal fix ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;

&lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'timer_start "$_"'&lt;/span&gt; DEBUG

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"[ &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{TIMER_SHOW}&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;{last_exit_code} ]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>`direnv` nedir? Ne işe yarar?</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2025/02/20/direnv-nedir-ne-ise-yarar/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2025/02/20/direnv-nedir-ne-ise-yarar/</id>
    <published>2025-02-20T22:06:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;Projelerinizde environment variable’ları otomatik olarak yüklemek ve kullanmak
için &lt;code&gt;go&lt;/code&gt; ile ile geliştirilmiş harika bir shell extention’ından bahsetmek
istiyorum. &lt;/p&gt;

&lt;p&gt;Geliştirme yaparken çok sık environment variable’ları kullanırız. Kimi zaman
secret’ları (&lt;em&gt;api token, aws credentials gibi&lt;/em&gt;) kimi zaman dinamik parametre
amaçlı hep shell environment variable’larına ihtiyacımız olur.&lt;/p&gt;

&lt;p&gt;Tüm yazılım dillerinin, environment variable’ları otomatik olarak
yükleyebileceği bir kütüphanesi ya da paketi bulunur. Python dünyasında 
&lt;a href="https://github.com/theskumar/python-dotenv"&gt;python-dotenv&lt;/a&gt;, Ruby dünyasında &lt;a href="https://github.com/bkeepers/dotenv"&gt;dotenv&lt;/a&gt;, Go dünyasında &lt;a href="https://github.com/joho/godotenv"&gt;GoDotEnv&lt;/a&gt; 
gibi popüler paketler sıklıkla kullanılanlar arasındadır ve çok sayıda da 
alternatifleri bulunur.&lt;/p&gt;

&lt;p&gt;Genelde bu paketler kodun içine monte edilir. Bu kütüphaneler çoğunlukla proje
dizininin altında &lt;code&gt;.env&lt;/code&gt; dosyalarını ararlar ve bulurlarsa otomatik olarak olarak 
bu dosyayı okurlar, parse ederler ve değişkenlerin atamasını yaparlar. Günün 
sonunda bu &lt;code&gt;.env&lt;/code&gt;  dosyası bir &lt;strong&gt;text&lt;/strong&gt; dosyasıdır ve bu kütüphaneler &lt;code&gt;key=value&lt;/code&gt; 
yaklaşımıyla ilgili değişkene okuduğu değeri atarlar.&lt;/p&gt;

&lt;p&gt;Gerçek bir &lt;code&gt;shell&lt;/code&gt; ya da &lt;code&gt;bash&lt;/code&gt; environment yoktur aslında. Yani kendi shell
environment’ınızda bir bash dosyasını &lt;code&gt;source&lt;/code&gt; etmek gibi değildir. Örneğin
sizin &lt;code&gt;~/.profile&lt;/code&gt; dosyanızda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source &lt;/span&gt;variables.bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gibi bir deklarasyon yapsanız, shell’iniz ayağa kalkarken, bu dosyada yazan 
her şeyi okur ve &lt;strong&gt;execute&lt;/strong&gt; eder. Sizin bu environment variable’ları için
yüklediğiniz (&lt;em&gt;source&lt;/em&gt;) dosya aslında &lt;strong&gt;öz-be-öz&lt;/strong&gt; shell script’lerinin de 
çalışabileceği bir &lt;strong&gt;source code&lt;/strong&gt; dosyasıdır.&lt;/p&gt;

&lt;p&gt;Ama &lt;code&gt;.env&lt;/code&gt; dosyalarını kullanan environment loader paketleri için durum böyle
değildir. Genelde doğru yazılmış environment variable ataması&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VARIABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"VALUE"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şeklinde olmalıdır. Genelde dotenv paketlerinde &lt;code&gt;export&lt;/code&gt; kullanılmaz çünkü
bu dosya shell execution için değildir. Bu bakımdan da sıkıntı şudur, eğer
size projeniz içinde farklı farklı dillerle bir şeyler yapıyorsanız ve
ortak environment variable’ları kullanıyorsanız işler biraz karışır.&lt;/p&gt;

&lt;p&gt;Örneğin ben sıklıkla projelerimda &lt;code&gt;Rakefile&lt;/code&gt; kullanıyorum, otomasyon için.
Dolayısıyla hem &lt;code&gt;ruby&lt;/code&gt; hem de &lt;code&gt;go&lt;/code&gt;’da aynı environment variable’ları kullanmak
durumunda kalıyorum. &lt;code&gt;Rakefile&lt;/code&gt; için ayrı paket, &lt;code&gt;go&lt;/code&gt; için ayrı paket
kullanmak gibi can sıkıcı, duplike bir durum oluşuyor.&lt;/p&gt;

&lt;p&gt;Şu da bir çözümdür, eğer bahsi geçen değişkenler, sizin bilgisayarınızdaki
tüm projelerde de kullanılıyorsa gidip bu değerleri &lt;code&gt;~/.profile&lt;/code&gt; ya da &lt;code&gt;~/.bashrc&lt;/code&gt;
gibi global shell sisteminize ekleyebilirsiniz ama bence bu kötü bir yöntem. Her
proje kendine has değişkenler ve değerler kullanabilir, boşu boşuna shell
ortamınızı şişirmeye gerek yok.&lt;/p&gt;

&lt;p&gt;Peki çözüm ne?&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://direnv.net/"&gt;direnv&lt;/a&gt; dizinlerin altında &lt;code&gt;.envrc&lt;/code&gt; dosyasına bakar ve otomatik olarak bu
dosyada yazanları &lt;code&gt;source&lt;/code&gt; eder. Projenize hiç bir ek paket kurmanıza da gerek
kalmaz. Neredeyse tüm işletim sistemleri için paketi bulunur. Ben macOS kullandığım
için:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;direnv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;yapmam yeterli. Kurulum sonrasında tek yapmam gereken &lt;code&gt;bash&lt;/code&gt; environment’ıma
eklemek;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;direnv hook bash&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sadece bash ile değil, &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;tcsh&lt;/code&gt;, &lt;code&gt;elvish&lt;/code&gt;, &lt;code&gt;nushell&lt;/code&gt;, &lt;code&gt;powershell&lt;/code&gt;
gibi neredeyse tüm shell’lere desteği mevcut. İşin güzel yanı, &lt;code&gt;.envrc&lt;/code&gt; bildiğimiz
shell scripti. Yani bu dosya &lt;code&gt;source .envrc&lt;/code&gt; şeklinde de kullanılabilecek
şekilde bir dosya. Script derken, bu dosya içinde &lt;code&gt;alias&lt;/code&gt; ya da &lt;code&gt;function&lt;/code&gt; tanımı
yapamazsınız! &lt;u&gt;Sadece environment variable deklarasyonu&lt;/u&gt; için kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Kurulum yaptıktan sonra, ilgili proje dizininize gidip &lt;code&gt;.envrc&lt;/code&gt; dosyasını
oluşturmanız yeterli. Ne zaman o dizine &lt;code&gt;cd&lt;/code&gt; yaparsanız, &lt;code&gt;direnv&lt;/code&gt; otomatik olarak
environment variable’ları yükler. Dizinden çıkınca da &lt;strong&gt;unload&lt;/strong&gt; eder yani
&lt;strong&gt;directory&lt;/strong&gt; seviyesinde çalışan environment variable’larınız var artık!&lt;/p&gt;

&lt;p&gt;İşin güzel yanı, alt dizinlere de etki ediyor. Şimdi bir demo yapalım;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/
&lt;span class="nb"&gt;mkdir &lt;/span&gt;demo
&lt;span class="nb"&gt;cd &lt;/span&gt;demo/
&lt;span class="nb"&gt;touch&lt;/span&gt; .envrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; dediğimiz anda bir hata mesajı alırız:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;direnv: error /private/tmp/demo/.envrc is blocked. Run `direnv allow` to approve its content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;çünkü &lt;code&gt;.envrc&lt;/code&gt;’nin otomatik yüklenmesi için izin vermemiz gerekir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;direnv allow
direnv: loading /private/tmp/demo/.envrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şimdi bir değişken tanımlayalım: &lt;code&gt;nano .envrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"amiga"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yine hata mesajı aldık:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;direnv: error /private/tmp/demo/.envrc is blocked. Run `direnv allow` to approve its content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Çünkü direnv korumalı çalışır, yani dosya değiştiği zaman mutlaka &lt;code&gt;direnv allow&lt;/code&gt;
dememiz gerekir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;direnv allow
direnv: loading /private/tmp/demo/.envrc
direnv: &lt;span class="nb"&gt;export&lt;/span&gt; +DEMO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;+DEMO&lt;/code&gt; yani &lt;code&gt;DEMO&lt;/code&gt; adında bir değişkeni otomatik yükledim der bize. Şimdi bir
üst dizine geçelim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/
direnv: unloading   &lt;span class="c"&gt;# &amp;lt;- artık DEMO diye bir değişken yok!&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEMO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# boş...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tekrar içeri girelim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/demo/
direnv: loading /private/tmp/demo/.envrc
direnv: &lt;span class="nb"&gt;export&lt;/span&gt; +DEMO

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEMO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
amiga

&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; sub1/sub2
&lt;span class="nv"&gt;$ &lt;/span&gt;tree &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-al&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
├── .envrc
└── sub1
    └── sub2

&lt;span class="nb"&gt;cd &lt;/span&gt;sub1/sub2/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şimdi &lt;code&gt;sub1/sub2&lt;/code&gt; altında &lt;code&gt;nano test.bash&lt;/code&gt; bir script oluşturalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; pipefail
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; errexit
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; nounset

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"DEMO? &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEMO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Çalıştıralım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;bash test.bash 
DEMO? amiga
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şimdi aynı yerde başka bir &lt;code&gt;.envrc&lt;/code&gt; dosyası yapalım ve &lt;code&gt;DEMO&lt;/code&gt; değişkenini
ezelim: &lt;code&gt;nano .envrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DEMO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"commodore"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yine uyarı aldık:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;direnv: error /private/tmp/demo/sub1/sub2/.envrc is blocked. Run `direnv allow` to approve its content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;direnv allow
direnv: loading /private/tmp/demo/sub1/sub2/.envrc
direnv: &lt;span class="nb"&gt;export&lt;/span&gt; +DEMO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şimdi bakalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEMO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
commodore

&lt;span class="nb"&gt;cd&lt;/span&gt; ../
direnv: loading /private/tmp/demo/.envrc &lt;span class="c"&gt;# &amp;lt;- hemen bir üstteki&lt;/span&gt;
direnv: &lt;span class="nb"&gt;export&lt;/span&gt; +DEMO                     &lt;span class="c"&gt;#    .envrc devreye girdi.&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DEMO&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
amiga        &lt;span class="c"&gt;# &amp;lt;- eski değer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mesela &lt;code&gt;.envrc&lt;/code&gt;’yi kendi &lt;code&gt;${HOME}/.envrc&lt;/code&gt; şeklinde yapıp, en dipteki
dizine kadar etki edebilirsiniz. Eğer her seferince &lt;code&gt;direnv allow&lt;/code&gt; ile
uğraşmak istemiyorsanız, &lt;strong&gt;whitelist&lt;/strong&gt;’e ekleyebilirsiniz. Önce konfigürasyon
dosyası oluşturmak lazım. Genelde &lt;code&gt;*nix&lt;/code&gt; ortamlarında &lt;code&gt;${XDG_CONFIG_HOME}&lt;/code&gt;
dizini altında bu işler olur. Ben macOS’da olduğum için;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/.config/direnv/direnv.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dosyasını kullananlardanım. Eğer &lt;code&gt;~/.config&lt;/code&gt; diye bir dizininiz yoksa elle
oluşturabilirsiniz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/.config         &lt;span class="c"&gt;# eğer yoksa&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/.config/direnv
&lt;span class="nb"&gt;touch&lt;/span&gt; ~/.config/direnv/direnv.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Örnek &lt;code&gt;.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[whitelist]&lt;/span&gt;
&lt;span class="py"&gt;prefix&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;"/Users/vigo/Repos/Development"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bu şu anlama geliyor, &lt;code&gt;/Users/vigo/Repos/Development&lt;/code&gt; dizini altında gördüğün
tüm &lt;code&gt;.envrc&lt;/code&gt; dosyalarını hiç sormadan otomatik &lt;code&gt;allow&lt;/code&gt; et. Konfigürasyonda
farklı seçenekler de var, detayları buradan &lt;a href="https://direnv.net/man/direnv.toml.1.html"&gt;görebilirsiniz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Konu sadece bununla da bitmiyor, kendiniz custom extension’lar da
yazabiliyorsunuz, hatta &lt;code&gt;direnv&lt;/code&gt; size programatik işler yapmak için eksta
&lt;code&gt;api&lt;/code&gt; da sunuyor.&lt;/p&gt;

&lt;p&gt;Şunu unutmayın, bilgisayarınızda sembolik linkler varsa, konfig dosyasına
gerçek path’i yazmanız lazım. Örneğin benim &lt;code&gt;~/Development&lt;/code&gt; bir sembolik
link, gerçek path’i ilk başta yazmadığım için 2-3 saat uğraştım whitelist için;
sonra;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;realpath&lt;/span&gt; ~/Development
/Users/vigo/Repos/Development  &lt;span class="c"&gt;# gerçek path bu!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;yaptım ve sorunu çözdüm.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2024’te Öğrendiğim Yeni Şeyler</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2024/12/29/2024-te-ogrendigim-yeni-seyler/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2024/12/29/2024-te-ogrendigim-yeni-seyler/</id>
    <published>2024-12-29T11:51:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;Sabah &lt;a href="https://dreamsofcode.io/mentoring"&gt;Elliott&lt;/a&gt;’ın &lt;a href="https://www.youtube.com/watch?v=A_3MP_V-kB4"&gt;YouTube&lt;/a&gt; videosunu izlerken düşündüm. Acaba
ben neler öğrendim diye. &lt;/p&gt;

&lt;p&gt;Yılın ilk aylarında, devraldığım &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;/&lt;a href="https://flask.palletsprojects.com/en/stable/"&gt;Flask&lt;/a&gt; projesi için api
dokümantasyonu hazırlamam gerekti. Uygulama otomatik dokümantasyon yapamaya
müsait olmadığı için tüm enpodint’leri elle, manuel olarak dokümante etmek
zorunda kaldım. Bu zorlu süreç sayesinde &lt;a href="https://swagger.io/docs/specification/v2_0/basic-structure/"&gt;OpenAPI Spec 2.0&lt;/a&gt;’ı sular seller
gibi öğrendim. Gözüm kapalı &lt;a href="https://swagger.io"&gt;swagger&lt;/a&gt; &lt;code&gt;yaml&lt;/code&gt;’ları yazmaya başladım.&lt;/p&gt;

&lt;p&gt;Bir süredir tüm yoğunluğum &lt;strong&gt;Go&lt;/strong&gt; ile geliştirme yapmak olduğu için, ilk
gözağrım &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;’yu da unutmamak, melekelerimi kaybetmemek için
geliştirmeler yapmaya devam ettim. Madem yeni şeyler öğreniyorum, haydi o
zaman bu projede &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; öğreneyim diyerek, önce bir
&lt;a href="https://github.com/vigo/textmate2-tailwind-css"&gt;TextMate bundle&lt;/a&gt;’ı yaptım. Projemde kullanırken gördüm ki
standalone compiler’ı buggy. Mecburen Django projesi içinde sanki bir &lt;a href="https://nodejs.org/docs/latest/api/"&gt;Node.js&lt;/a&gt;
projesi gibi Tailwind’i entegre etmeyi de öğrendim.&lt;/p&gt;

&lt;p&gt;TextMate’ten kopamayan adam olarak &lt;a href="https://github.com/vigo/textmate2-ruff-linter"&gt;Ruff Linter&lt;/a&gt; ve 
&lt;a href="https://github.com/vigo/textmate2-python-fmt"&gt;Python Linter&lt;/a&gt; bundle’ları yaptım, bu esnada &lt;a href="https://ruby-doc.org/stdlib-1.8.6/"&gt;Ruby 1.8.6&lt;/a&gt; 
(&lt;em&gt;Tedavülden kalkalı en az 10 yıl oldu&lt;/em&gt;) ile mecburen uğraşmak zorunda kaldım :)&lt;/p&gt;

&lt;p&gt;Django’dan kopamadığım için daha önce çalıştığım şirketin organizasyonundan
yayınladığım ettiğim, ayrıldıktan sonra erişim sıkıntısı çektiğim bir 
&lt;a href="https://docs.djangoproject.com/en/5.1/ref/contrib/admin/"&gt;Django Admin&lt;/a&gt; filtresi projem vardı, onu başlatan &lt;a href="https://github.com/vigo/django-admin-list-filter"&gt;yazdım&lt;/a&gt;, 
bu esnada python paket reposunun manifestlerinin değiştiğini görüp yeni stili 
öğrenmek zorunda kaldım. Hatta ilk olarak eksik yayınlamışım, sağolsun 
&lt;a href="https://github.com/bahattincinic"&gt;Bahattin&lt;/a&gt; ikaz etti de düzelttim.&lt;/p&gt;

&lt;p&gt;Her projemde, command-line otomasyonları için &lt;a href="https://ruby.github.io/rake/doc/rakefile_rdoc.html"&gt;Rakefile&lt;/a&gt; kullanan
biri olarak, aynı zamanda Ruby melekelerimi de korumamı sağlıyor, hep aklımda
olan &lt;a href="https://github.com/rubocop/rubocop"&gt;Rubocop&lt;/a&gt; ruby linter entegrasyonunu da hayatıma sokayım dedim,
demez olaydım :)&lt;/p&gt;

&lt;p&gt;Python için linter olarak &lt;a href="https://docs.astral.sh/ruff/"&gt;Ruff&lt;/a&gt;’ı kullanıyorum, hızlı olduğu için. Ne
yazık ki static check’leri yapamıyor. Yani olmayan bir paket import
ettiğinizde &lt;a href="https://github.com/pylint-dev/pylint"&gt;Pylint&lt;/a&gt; gibi sizi doğal olarak uyaramıyor, &lt;em&gt;böyle bir
paket yok&lt;/em&gt; diye.&lt;/p&gt;

&lt;p&gt;Mecburen Python/Django projeleri için Ruff ile birlikte çalışabilecek pylint
entegrasyonu yapmayı da öğrenmem gerekti. Bu da yetmedi, bu işleri
&lt;a href="https://pre-commit.com/"&gt;Pre-Commit&lt;/a&gt; ve &lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt;’a da bağlamam
gerekti. Keza &lt;a href="https://github.com/rubocop/rubocop"&gt;rubocop&lt;/a&gt;’u da. Dolayısıyla kendimi iyi kötü bildiğimi
düşündüğüm ama çok eksiğim olduğunu farkettiğim GitHub Action’ları bir tur
daha pekiştirirken buldum.&lt;/p&gt;

&lt;p&gt;Çok kullandığım &lt;a href="https://github.com/peritus/bumpversion"&gt;bumpversion&lt;/a&gt; artık geliştirilmediği için
yenisine geçeyim dedim; &lt;a href="https://callowayproject.github.io/bump-my-version/"&gt;bump-my-version&lt;/a&gt;. Bir sürü şeyi 
öğrenmek, anlamak ve düzletme yapmam gerekti.&lt;/p&gt;

&lt;p&gt;GitHub Action’lar da hızla güncelleniyor, tekrar &lt;a href="https://github.com/dependabot"&gt;depandabot&lt;/a&gt;
entegrasyonu, action’ların güncel halleri, depricated olan direktiflerin 
düzeltilmesi vs derken yeni bilgilerle öğrenmeye devam ettim.&lt;/p&gt;

&lt;p&gt;Yine &lt;a href="https://dreamsofcode.io/mentoring"&gt;Elliott&lt;/a&gt;’ın başka bir &lt;a href="https://www.youtube.com/watch?v=F-9KWQByeU0"&gt;videosu&lt;/a&gt; beni acayip gaza getirdi
ve bildiğimi sandığım &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;’da yeni level’lar açıldı. Neler mi
geldi? &lt;a href="https://docs.docker.com/engine/swarm/"&gt;Docker Swarm&lt;/a&gt;, sanal makineye cluster kurdum, kendi
çapımda bir AWS, GCP ultra minimal versiyonunu kurdum. &lt;a href="https://traefik.io/"&gt;Traefik&lt;/a&gt; 
proxy/load balancer, &lt;a href="https://docs.docker.com/reference/cli/docker/network/"&gt;Docker Networking&lt;/a&gt;, 
&lt;a href="https://docs.docker.com/reference/cli/docker/secret/"&gt;Docker Secrets&lt;/a&gt;, secure container images,
&lt;a href="https://docs.docker.com/reference/cli/docker/stack/"&gt;Docker Stack&lt;/a&gt; gibi gibi bir sürü şeyi öğrendim ve 
production ortamı oluşturdum. &lt;a href="https://www.portainer.io/"&gt;Portainer&lt;/a&gt; diye harika bir 
orkestrasyon aracı ile tanıştım, hastası oldum.&lt;/p&gt;

&lt;p&gt;Her şeyi minimum giderle yapmak için, GitHub’ın &lt;a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"&gt;container registry&lt;/a&gt;’sini
(&lt;em&gt;GHCR&lt;/em&gt;) daha iyi kullanmayı öğrendim.&lt;/p&gt;

&lt;p&gt;İmkanlar kısıtlı olunca kaynağı da doğru ve efektif kullanabilmek için hesap
kitap yapmam da gerekti. Hangi servis, ne kadar &lt;strong&gt;memory&lt;/strong&gt;, &lt;strong&gt;cpu&lt;/strong&gt; tüketmeli,
kaç &lt;strong&gt;replica&lt;/strong&gt; ile işi çözerim, zero-down-time deployment’ı nasıl çözerim,
custom servislerin metrikleri &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;’ya nasıl akıtırım gibi gibi
bir sürü branşım dışı şeyi de kurcalaya kurcalaya öğrendim.&lt;/p&gt;

&lt;p&gt;Eski çalıştığım işlerde genelde &lt;strong&gt;devops&lt;/strong&gt; konularını birileri çözerdi ve ben
sadece tüketici olarak dashboard’lara bakar takip ederdim, şimdi hepsini
kendim yapmak durumunda kalınca mecburen bunları da öğrenmek zorunda kaldım.&lt;/p&gt;

&lt;p&gt;İş başa düşünce mecburen öğrenmek gerekiyor, zevkli de oluyor, kendi adıma
acayip keyif aldım. &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; entegrasyonu, özel bir alarm
yapıp bunu &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;’e göndertmek bu kadar zor olmamalı, korkunç bir kullanıcı
deneyimi olan Grafana işini süper yapmasa gerçekten kullanması çok zor :)
Belkide benim beceriksizliğim de olabilir ama sonuç olarak eliniz ayağınız
oluyor Grafana!&lt;/p&gt;

&lt;p&gt;Hazırladığım eğitimler bildiklerime cila çekmeyi de sağlıyor, hem unuttuklarımı
hatırlıyorum hem de yeni şeyler ekliyorum. Bu doğrultuda, hazırladığım Docker
eğitimi için basit bir endpoint’i olan http servisini her platformda yazıp
dockerize ettim;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;FastAPI&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Sinatra&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dolayısıyla, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;C#&lt;/code&gt; benim için ilk kez kurcaladığım şeyler oldu, tam olarak
öğrendim diyemem ama biraz kasarsam istediklerimi yapabilirim gibi geliyor.
Bu arada hepsinin yaptığı iş bir tane endpoint var ve geriye &lt;code&gt;json&lt;/code&gt; olarak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dönüyorlar. Geliştirmesi bana göre en zor olan &lt;code&gt;C&lt;/code&gt;, ama tükettiği ram ve cpu
olarak bakınca hiç biri yanından bile geçemiyor. Neredeyse &lt;strong&gt;YOK&lt;/strong&gt; denecek
kadar az.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Stack&lt;/th&gt;
&lt;th style="text-align: left"&gt;Memory&lt;/th&gt;
&lt;th&gt;Image Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;C&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;108KB&lt;/code&gt; *&lt;/td&gt;
&lt;td&gt;69.3Mb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Go&lt;/td&gt;
&lt;td style="text-align: left"&gt;2.95MB&lt;/td&gt;
&lt;td&gt;&lt;code&gt;11.7Mb&lt;/code&gt; *&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Node&lt;/td&gt;
&lt;td style="text-align: left"&gt;13.8MB&lt;/td&gt;
&lt;td&gt;218MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;DotNet&lt;/td&gt;
&lt;td style="text-align: left"&gt;15.92MB&lt;/td&gt;
&lt;td&gt;253MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Sinatra&lt;/td&gt;
&lt;td style="text-align: left"&gt;28.8MB&lt;/td&gt;
&lt;td&gt;97.7MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Flask&lt;/td&gt;
&lt;td style="text-align: left"&gt;34MB&lt;/td&gt;
&lt;td&gt;161MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;FastAPI&lt;/td&gt;
&lt;td style="text-align: left"&gt;38.8MB&lt;/td&gt;
&lt;td&gt;122MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Django&lt;/td&gt;
&lt;td style="text-align: left"&gt;53.12MB&lt;/td&gt;
&lt;td&gt;203MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;İnanılmaz düşük &lt;strong&gt;memory&lt;/strong&gt; tüketimiyle &lt;code&gt;C&lt;/code&gt; açık ara &lt;strong&gt;ezdi&lt;/strong&gt; geçti. En düşük container
image size olarak &lt;code&gt;Go&lt;/code&gt; affetmedi. Hepsi multi-stage build, kendi bilgilerim
dahilinde olabilecek en küçük image’lar&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt; kullanıyorum, bu bakımdan Docker’la ilişkim çok arttığı için &lt;a href="https://orbstack.dev/"&gt;Orbstack&lt;/a&gt;’i
de derinlemesine kullanmayı öğrendim.&lt;/p&gt;

&lt;p&gt;Bu yıl, http katmanıyla çok ilgilendim, dolayısıyla yeni şeyler de öğrendim.
Sene başında ilk commit’i yaptığım, geçtiğimiz günler cila çekip refactor
ettiğim basit bir http request debugger’la uğraşırken yine &lt;strong&gt;RAW HTTP&lt;/strong&gt;, isteklerin
replike edilmesi gibi konularla uğraşıp basit bir &lt;a href="https://github.com/vbyazilim/basichttpdebugger"&gt;araç&lt;/a&gt; yaptım.&lt;/p&gt;

&lt;p&gt;HTTP Request ile uğraşınca, &lt;code&gt;Accept&lt;/code&gt; header’ının da derinlerine indim, lazım
olur diye hem öğrendim hem de mimik bir &lt;a href="https://github.com/vigo/accept"&gt;go kütüphanesi&lt;/a&gt; yaptım.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngrok&lt;/code&gt; süper bir tool ama her ay &lt;code&gt;$9&lt;/code&gt; ödememek için bunun &lt;strong&gt;free&lt;/strong&gt; ve
&lt;strong&gt;open-source&lt;/strong&gt; versiyonuna başladım, tcp katmanında beni bekleyen yeni
maceralara da giriş yaptım dolayısıyla. Bittiği zaman açık-kaynak ve ücretsiz
olarak, her developer’ın ihtiyacı bir tool olarak dağıtacağım.&lt;/p&gt;

&lt;p&gt;Mobile client ile sunucu arasında güvenli iletişimi sağlamak için &lt;strong&gt;SSL
REVERSE PINNING&lt;/strong&gt; konularına girdim, dolayısıyla sertifika türleri, üretimi,
verify etmek vs gibi konularda bu yıl boğuştuğum şeyler arasındaydı.&lt;/p&gt;

&lt;p&gt;Mobil uygulama geliştiricilerinin çok sevdiğini düşündüğüm
&lt;a href="https://supabase.com/"&gt;Supabase&lt;/a&gt;’i de bu yıl kurcalamak ve öğrenmek durumunda kaldım.
Gerçekten bir çok problemi ücretsiz olarak çözmeyi sağlıyor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; hep bildiğim bir platform ama hiç kullanmamıştım, denemek
için basit bir python app’i deploy ettim, eskiden bu tür işlerde &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;
kullanırdım, Vercel iyi bir alternatif oldu.&lt;/p&gt;

&lt;p&gt;Webhook’larla uğraşırken tesadüfen &lt;a href="https://requestcatcher.com"&gt;requestcatcher.com&lt;/a&gt;
diye bir ücretsiz servise denk geldim, çok işime yaradı.&lt;/p&gt;

&lt;p&gt;En çok işime yarayan yeni öğrendiğim, daha doğrusu biliyordum ama kullanmamıştım,
artık elim ayağım oldu, &lt;a href="https://direnv.net/"&gt;direnv&lt;/a&gt;. Environment Variable’larla uğraşanların
çok işine yarar diye düşünüyorum.&lt;/p&gt;

&lt;p&gt;GitHub’da hızlıca repo oluşturmak için minik bir &lt;a href="https://github.com/vigo/git-init-githubrepo"&gt;tool&lt;/a&gt; 
yaptım, Go’nun yeni &lt;code&gt;embed&lt;/code&gt; özelliklerini de bu sayede öğrendim.&lt;/p&gt;

&lt;p&gt;Bu sene kitap açısından da (&lt;em&gt;fiziksel kitap, ebook değil&lt;/em&gt;) verimli geçti; şu
kitaplara başladım:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.tr/dp/0132350882"&gt;Clean Code&lt;/a&gt;: Benim dünyamla pek örtüşmese de genel kültür açısından okuyorum.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.co.uk/Test-Driven-Development-Python-Harry-Percival/dp/1491958707"&gt;Test Driven Development With Python&lt;/a&gt;: Bu sene original kitabına sahip oldum, harika bir kitap. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.co.uk/dp/B08CMF2CQF"&gt;System Design Interviews I&lt;/a&gt;: Ufuk açıcı, harika şeyler var.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.co.uk/dp/1736049119"&gt;System Design Interviews II&lt;/a&gt;: Serinin ikinci kitabı.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.tr/dp/1680508466"&gt;Efective Go Recepies&lt;/a&gt;: Fena değil ama beklentimin altında çıktı.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.tr/dp/1617299596"&gt;100 Go Mistakes&lt;/a&gt;: Efsane bir kitap, başucu kitabı, şiddetle tavsiye ediyorum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dedim ya, asıl stack’im &lt;strong&gt;Go&lt;/strong&gt;. Bir kısım yanlışlarımı da bu yıl öğrendim. Hatta biraz
kendime de kızdım, bu hataları benim yapmamam lazımdı. Olsun, en azından artık
bu tür hataları yapmam, tokadı yedim :)&lt;/p&gt;

&lt;p&gt;Kendi çapımda biraz &lt;strong&gt;AI&lt;/strong&gt; işlerine de baktım ama genel olarak tüketen
tarafındayım, ilk kez bu sene local’de bir şeyleri ayağa kaldırıp kurcaladım.
ChatGPT’yi çok kullanmaya başladım, bu iyi değil. Irgat gibi işi ona yaptırıp,
şurayı düzelt burayı düzelt diyorum.&lt;/p&gt;

&lt;p&gt;Şöyle dönüp bakınca bu yıl open-source 1-2 ufak şey yapmışım, bu da beni mutlu
ediyor. Bol bol tuturial izledim (&lt;em&gt;YouTube&lt;/em&gt;, &lt;em&gt;LinkedIn Learning&lt;/em&gt;, &lt;em&gt;O’Reilly&lt;/em&gt;, &lt;em&gt;Frontend Masters&lt;/em&gt;),
bildiğimi sandığım ama çok eksiğim olan şeyleri de görmüş oldum.&lt;/p&gt;

&lt;p&gt;Özetle &lt;strong&gt;2024&lt;/strong&gt; kendi adıma bol bol öğrenme, okuma, izleme ve geliştirme ile
geçmiş. Umarım okuyucalar da benzer şeyleri yaşamıştır. Bakalım &lt;strong&gt;2025&lt;/strong&gt; nasıl
geçecek!&lt;/p&gt;

&lt;h3&gt;Linkler&lt;/h3&gt;

&lt;p&gt;Yazıda bahsi geçen kendi geliştirdiğim projelerin linkleri aşağıda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vbyazilim/basichttpdebugger"&gt;Basic HTTP Debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bilusteknoloji/reverse-ssl-pinning-demo"&gt;Reserve SSL Pinning Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vigo/accept"&gt;accept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vigo/django-admin-list-filter"&gt;Django Admin List Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vigo/git-init-githubrepo"&gt;GitHub Friendly Repo Creator/Initializer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vigo/textmate2-tailwind-css"&gt;TextMate2 Tailwind CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vigo/textmate2-python-fmt"&gt;TextMate2 Python Linter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vigo/textmate2-ruff-linter"&gt;TextMate2 Ruff Linter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ruby 1.8.7, Bash ve TextMate</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2024/05/16/ruby-1-dot-8-7-bash-ve-textmate/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2024/05/16/ruby-1-dot-8-7-bash-ve-textmate/</id>
    <published>2024-05-16T22:30:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;2023&lt;/strong&gt;’te python dünyasına bomba gibi giriş yapan &lt;a href="https://docs.astral.sh/ruff/" title="Ruff Linter"&gt;Ruff Linter&lt;/a&gt; için bir 
&lt;a href="https://github.com/vigo/textmate2-ruff-linter" title="Python Ruff Linter for TextMate2"&gt;TextMate bundle&lt;/a&gt;’ı geliştirmiştim. &lt;/p&gt;

&lt;p&gt;Tam olarak entegre olamadığım için halen &lt;a href="https://github.com/vigo/textmate2-python-fmt" title="Python FMT bundle for TextMate"&gt;eski bundle&lt;/a&gt;’ımı 
kullanmaya devam ediyordum. Üzerinde çalıştığım projenin çok fazla python
dosyasına sahip olması ve çok fazla düzeltilecek linter problemleri olmasından
dolayı zamandan kazanmak için Ruff’ı kullanmaya karar verdim. Bir baktım,
aradan geçen süre zarfında Ruff çok ilerlemiş ve benim bundle çalışmaz hale
gelmiş. Komut çağırma şekli değişmiş, argümanlar farklılaşmış.&lt;/p&gt;

&lt;p&gt;O zaman dedim ki;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Madem öyle, şu bundle’ı baştan özene bezene tekrar yapayım!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;dedim ve bu noktada büyük bir maceranın içine gireceğimden haberim yoktu. Şu
soru sorulabilir; &lt;/p&gt;

&lt;h2&gt;Neden TextMate ?&lt;/h2&gt;

&lt;p&gt;macOS’ta native çalışan tek dişi kalmış bir canavar kendisi. Ama asıl efsane
kısmı şu, bu uygulamayı, bildiğiniz herhangi bir programlama dilini kullanarak
(Python, Ruby, Bash, JavaScript, PHP, Perl, Swift, Lisp, AppleScript&amp;hellip;)
&lt;strong&gt;extend&lt;/strong&gt; edebilirsiniz. Hiçbir özel dil, konfigürasyon öğrenmenize gerek yok!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Şöyle güzel bir markdown editörüm olsa ?&lt;/strong&gt; diyip oturup bunun için bundle
yapabildim. Aynısını VS Code’a denedim, &lt;code&gt;vim&lt;/code&gt;’de denedim beceremedim. Önce
vim’in dilini öğrenmem lazım (kullanım kısmına girmiyorum bile&amp;hellip;) Altı üstü
bir metin editörünü kullanmak için kurs almak, bir sürü video izlemek bana
biraz garip geliyor.&lt;/p&gt;

&lt;p&gt;Sonradan gelen pek çok editör TextMate’in &lt;code&gt;tmbundle&lt;/code&gt; yaklaşımını aynen
kopyalamış ama asıl yapması gereken kısmı yapamamıştır. Sadece &lt;strong&gt;Grammar&lt;/strong&gt;
(&lt;em&gt;Syntax Highlighting&lt;/em&gt;), ve &lt;strong&gt;Snippets&lt;/strong&gt; kavramlarını birebir kopyaladı pek
çok meşhur editör/ide. Ama Orijinal bundle fonksiyonunu beceremediler.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rmate&lt;/code&gt; ile &lt;code&gt;ssh&lt;/code&gt; ile bağlandığım bir sunucudaki dosyayı local TextMate’imde
kolayca açabiliyorum. Port forwarding yapıyor, TextMate default olarak &lt;code&gt;52698&lt;/code&gt;
porttan dinliyor sürekli.&lt;/p&gt;

&lt;p&gt;Bir şey lazım olunca, kimseye muhtaç olmadan hemen yapabilme özgürlüğü veriyor
bana. Bu bakımdan son &lt;strong&gt;15 yıldır&lt;/strong&gt; tek kullandığım editör. Bu ilkellik
sayesinde &lt;code&gt;go&lt;/code&gt; bilgimi inanılmaz pekiştirdim. Çünkü ne &lt;strong&gt;autocompletion&lt;/strong&gt; var,
ne nokta işaretine basınca otomatik tamamlama var, devamlı başka bir tab’de
kullandığım kütüphanenin kaynak kodunu okumak zorunda kaldım. &lt;strong&gt;Acaba x
objesinin ne metodu var ?&lt;/strong&gt; sorusunun cevabı için devamlı kod okumak zorunda
kaldım.&lt;/p&gt;

&lt;p&gt;Ne &lt;strong&gt;GitHub Co-Pilot&lt;/strong&gt; var ne de başka bir şey. Mecburen bu linter/checker
geliştirme işlerini de öğrenmek zorunda kaldım. İlkelliğin çok faydasını gördüm
ama geliştirme hızı olarak yavaş kaldım ama sıfır hataya yakın kod yazmaya
başladım (&lt;em&gt;linting bakımında&lt;/em&gt;n).&lt;/p&gt;

&lt;p&gt;Yıllar içinde, her yeni çıkan editörü denedim ve hiçbirinde TextMate’in
esnekliğini bulamadım. İçlerinde benim için en heyecan verici olan &lt;a href="https://zed.dev/" title="Zed Editor"&gt;zed&lt;/a&gt;
oldu ama o da bir yere kadar&amp;hellip;&lt;/p&gt;

&lt;p&gt;Bu yazıyı sizleri TextMate’e geçirmek için &lt;strong&gt;yazmıyorum&lt;/strong&gt;, belki seneye artık
böyle bir araç tarih olacağı için kendi çapımda 
&lt;strong&gt;bir zamanlar böyle güzel bir araç da vardı&lt;/strong&gt; denmesi için, 
tarihe minik bir not düşsün diye yazıyorum.&lt;/p&gt;

&lt;h2&gt;TextMate Bundle Editor ve Command&lt;/h2&gt;

&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;img class="shadow"  title="TextMate2 Bundle Editor ekran görüntüsü" src="/public/images/posts/2024-05-14-textmate-bundle-command.png" alt="TextMate2 Bundle Editor ekran görüntüsü"&gt;&lt;/figure&gt;&lt;p&gt; TextMate2 Bundle Editor böyle bir şey, TextMate 1 daha güzeldi 
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Genel prensip şu; hangi dilde (&lt;em&gt;scope&lt;/em&gt;) kod yazıyorsanız, belli event’leri
tetikleyerek ekrandaki kodu (&lt;em&gt;document&lt;/em&gt;) input olarak alıp bir şeyler
yapabiliyoruz. Linter için yapmamız gereken şey, aynı command-line’ı taklit
ederek &lt;code&gt;STDIN&lt;/code&gt; (&lt;em&gt;standard input&lt;/em&gt;)’i okuyup shell komutuna bir kısım argümanla
beraber inputu göndermek/pas etmek:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"print('hello')"&lt;/span&gt; | ruff check &lt;span class="nt"&gt;--select&lt;/span&gt; T201 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--stdin-filename&lt;/span&gt; main.py &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--output-format&lt;/span&gt; grouped -

main.py:
  1:1 T201 &lt;span class="sb"&gt;`&lt;/span&gt;print&lt;span class="sb"&gt;`&lt;/span&gt; found

Found 1 error.
No fixes available &lt;span class="o"&gt;(&lt;/span&gt;1 hidden fix can be enabled with the &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nt"&gt;--unsafe-fixes&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; option&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ne yaptık ? &lt;code&gt;flake8-print (T20)&lt;/code&gt; kuralını uygulayarak, &lt;code&gt;STDIN&lt;/code&gt;’den input’u
komuta &lt;code&gt;pipe&lt;/code&gt;’ladık, &lt;code&gt;ruff&lt;/code&gt; input’ı aldı, fake dosya adı da verdik sanki
fiziksel dosya varmış gibi, hata listesini de gruplayarak bize sonucu verdi.&lt;/p&gt;

&lt;p&gt;Kabaca, TextMate’in metin yazılan ekranını (&lt;em&gt;document&lt;/em&gt;) okuyup aynı hareketi
yapmaya çalışıp ilk zorlu kısmı atlatmayı planladım. Şimdi bu command ekranı
basit bir &lt;code&gt;ruby&lt;/code&gt; script çalıştırabileceğimiz bir &lt;code&gt;ruby&lt;/code&gt; dosyası gibi
düşünebiliriz. Bu alana satırlarca fonksiyon yazmayayım, şöyle güzelce bir
ruby projesi şeklinde, &lt;code&gt;class&lt;/code&gt; ya da &lt;code&gt;module&lt;/code&gt; kullanarak &lt;strong&gt;re-usable&lt;/strong&gt; bir
yapı kursam, daha sonra da kullansam diye düşündüm.&lt;/p&gt;

&lt;p&gt;Uzun zamandır aktif olarak ruby geliştirmesi yapmadığım için, internet’te
&lt;strong&gt;ruby project structure&lt;/strong&gt; diye arama yaptım, kafama yatan bir şeyler bulurum
diye. Bulabildiğim tek şey, yıllar önce benim de okuyup oradan öğrendiğim;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://guides.rubygems.org/make-your-own-gem/"&gt;https://guides.rubygems.org/make-your-own-gem/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;makalesi oldu. Ben zaten uzun zaman önce bu konu ile ilgili bir 
&lt;a href="https://ugur.ozyilmazel.com/blog/tr/2014/09/23/rubygem-hazirliyoruz/"&gt;blog yazısı&lt;/a&gt; da yazmıştım. &lt;code&gt;python&lt;/code&gt; ya da &lt;code&gt;go&lt;/code&gt; olsa bir sürü repo, 
blog var konuyla ilgili olarak ama ne yazık ki &lt;code&gt;ruby&lt;/code&gt; için bir şey bulamadım.&lt;/p&gt;

&lt;h2&gt;Ruby 1.8.7&lt;/h2&gt;

&lt;p&gt;Ruby, TextMate’in DNA’sında olan bir dil ama ne yazıkki uzunca bir süre 
&lt;strong&gt;Ruby 1.8.7&lt;/strong&gt; ve sonrasında yarım yamalak çalışan &lt;strong&gt;Ruby 2.6.10&lt;/strong&gt; ile birlikte
geldi. &lt;strong&gt;Apple M&lt;/strong&gt; işlemcilerin çıkışıyla TextMate daha da büyük sorunlar 
yaşamaya başladı. Builtin pek çok komut ruby kullandığı için an itibariyle 
&lt;strong&gt;Rosetta 2&lt;/strong&gt; sayesinde zar zor çalışmaya devam ediyor.&lt;/p&gt;

&lt;p&gt;Daha önce geliştirdiğim &lt;a href="https://github.com/vigo/textmate2-gfm-preview" title="GitHub Flavored Markdown Editor and Preview for TextMate2"&gt;GitHub Flavored Markdown Editor&lt;/a&gt;
bundle’ında son versiyon ruby kullanmıştım ama bundle’ı kurarken bir ruby
projesi kurar gibi paketler’i, ruby’i kurmak gibi şeylerle uğraşmak
gerekiyordu. Birazcık zahmetli, ruby ile haşır neşir olanlar daha kolay
anlar ve kurulumu yapabilir.&lt;/p&gt;

&lt;p&gt;Halen TextMate kullanan Python geliştirici kaldıysa, çok zahmet çekmeden,
kolayca, varolanlara ek kurulum yapmadan, sadece &lt;code&gt;brew install ruff&lt;/code&gt; ile
&lt;strong&gt;Ruff&lt;/strong&gt;’ı kurup hayatına devam etmesini istiyordum. Dedim ya, yeni bir 
maceraya yolculuk yapmayı kafaya koymuştum :)&lt;/p&gt;

&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;img class="shadow"  title="Rafta duran Ruby kitapları" src="/public/images/posts/2024-05-14-ruby-books.jpg" alt="Rafta duran Ruby kitapları"&gt;&lt;/figure&gt;&lt;p&gt; Emektar Ruby kitaplarım! 
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Ruby bilgilerimi tazelemek için kendi yazdığım, bitiremediğim 
&lt;a href="https://vigo.github.io/ruby101-kitap/"&gt;ruby kitabıma&lt;/a&gt; baktım. Modül kısmına. Çok basit ve yüzeysel
yazmışım. İşime pek yaramadı. &lt;code&gt;extend&lt;/code&gt; mi? &lt;code&gt;include&lt;/code&gt; mu? kim kimden nasıl
türüyordu? Biri birinden türediği zaman metodlar erişilemez oluyordu, &lt;code&gt;public/private&lt;/code&gt;
durumları mı vardı? Bir sürü unuttuğum konular. Rafta duran eski kitaplara
bir bakayım dedim. Kitaplar süper ama hiç birinde bir ruby projesi nasıl olur
yazmıyordu.&lt;/p&gt;

&lt;p&gt;Ben de daha fazla zaman kaybetmeden kervan yolda düzülür, taktik maktik yok
bam bam bam diye giriştim. İlk yapmam gereken şey bir tür &lt;strong&gt;Logger&lt;/strong&gt;
implemente etmekti.&lt;/p&gt;

&lt;h2&gt;Logger / Debugger&lt;/h2&gt;

&lt;p&gt;TextMate bize iki tane &lt;strong&gt;event&lt;/strong&gt; veriyor; buna da &lt;strong&gt;Semantic Class&lt;/strong&gt; deniyor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;callback.document.will-save&lt;/code&gt;: fiziksel &lt;strong&gt;SAVE&lt;/strong&gt; işleminden önce&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback.document.did-save&lt;/code&gt;: &lt;strong&gt;SAVE&lt;/strong&gt; işleminden sonra&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Editör ekranında (&lt;em&gt;document&lt;/em&gt;) &lt;strong&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;/strong&gt; + &lt;kbd&gt;S&lt;/kbd&gt; (&lt;em&gt;Command + S&lt;/em&gt;) 
tuşuna basıldığı an önce &lt;code&gt;will-save&lt;/code&gt; sonra &lt;code&gt;did-save&lt;/code&gt; çalışıyor. Birbirinden 
bağımsız ve habersiz iki olay. &lt;code&gt;will-save&lt;/code&gt; esnasında bir hata olursa, bunu 
ekranda bir yerde görmek için iki seçeneğim var. Ya &lt;strong&gt;tool tip&lt;/strong&gt; göstermek, 
bir an belirip mouse üzerinde gidince kaybolan ya da yeni bir döküman açıp oraya 
yazmak.&lt;/p&gt;

&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;span class="player-status"&gt;▶&lt;/span&gt;&lt;img class="shadow animate"  data-play="/public/images/posts/2024-05-16-textmate-tooltip.gif"  title="TextMate2 Editor ekran görüntüsü, tool tip" src="/public/images/posts/2024-05-16-textmate-tooltip.png" alt="TextMate2 Editor ekran görüntüsü, tool tip"&gt;&lt;/figure&gt;&lt;p&gt; İşte tool tip. Mouse üzerinden gidince otomatik kayboluyor. 
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Event’ler arasında bir bağ olmadığı için, bunlar sanki bağımsız shell
session’ı gibi her sefer sıfırdan &lt;strong&gt;clean-slate&lt;/strong&gt; çalışıyorlar. Yani o an, ruby’den
bir environment variable’ı set etsem (&lt;em&gt;will-save&lt;/em&gt;) sonrasında çalışan (&lt;em&gt;did-save&lt;/em&gt;)
event bu variable’ı okuyamıyor çünkü o scope’da öyle bir environment variable’ı
yok.&lt;/p&gt;

&lt;p&gt;Kodu formatlama anı &lt;code&gt;will-save&lt;/code&gt; esnasında &lt;code&gt;STDIN&lt;/code&gt;’i okuyup komuta verilip
sonuç tekrar document’a yazılıyor yani &lt;code&gt;STDOUT&lt;/code&gt;’a ve devamında fiziksel SAVE
işlemi başlıyor ve dosyanın nihayi hali diske yazılıyor. Önden formatlı hali
vermem lazım ki esas &lt;code&gt;check&lt;/code&gt; işlemi SAVE esnasında yapılabilsin. Aksi taktirde
sonsuz döngü gibi oluyor. Aynı &lt;code&gt;django&lt;/code&gt;’nun &lt;code&gt;signals&lt;/code&gt;’ı gibi. SAVE ederken
write işi yaparsam tekrar &lt;strong&gt;SAVE&lt;/strong&gt; tetikleniyor, sonsuz döngü&amp;hellip;&lt;/p&gt;

&lt;p&gt;Shell komutlarını çağırmak için TextMate’in içinden &lt;code&gt;process.rb&lt;/code&gt; çıkıyor ve
bunu kendi kütüphanelerimizde;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TM_SUPPORT_PATH'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/lib/tm/process'&lt;/span&gt;

&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TextMate&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;TM_FILEPATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# fiziksel dosya&lt;/span&gt;
&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TextMate&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:input&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# custom input &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şeklinde kullanıyoruz. İlk gol burada geliyor. Ruff, komut satırından
çalışınca hataları &lt;code&gt;STDERR&lt;/code&gt;’a, çıktıyı da &lt;code&gt;STDOUT&lt;/code&gt;’a veriyor. Benim &lt;strong&gt;shell
exit code&lt;/strong&gt;’a ihtiyacım var. Ruff config yanlış olabilir, verilen input parse
edilemiyebilir. Eğer hata varsa, &lt;code&gt;out&lt;/code&gt; boş, &lt;code&gt;err&lt;/code&gt; dolu. Eğer kod format işi
başarışız biterse format edilmiş çıktı &lt;code&gt;out&lt;/code&gt;’a, linter hataları da &lt;code&gt;err&lt;/code&gt;’a
gibi kaos return value’lar var. &lt;/p&gt;

&lt;p&gt;Shell exit code’u alabilsem direk ona bakacağım, eğer &lt;code&gt;0&lt;/code&gt; ise execution’da bir
hata yok diyeceğim ama bunu alamıyorum. Ya kendim yeni bir &lt;code&gt;process&lt;/code&gt;
kütüphanesi yapacağım ya da olanı kullanacağım.&lt;/p&gt;

&lt;p&gt;Normalde;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;NONEXISTINGDIR
&lt;span class="nb"&gt;ls&lt;/span&gt;: NONEXISTINGDIR: No such file or directory

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;olur. Exit code &lt;code&gt;0&lt;/code&gt; değilse bir hata var demektir. &lt;code&gt;TextMate::Process.run&lt;/code&gt;
bana bunu vermiyor :) Bir formül bulmam lazım. Esas problem, ilk tetiklenen
event sırasında bir hata olursa bir anlık bu durumu nerede görüntüleyebilirim?
Hani bu bir web uygulaması olsa, konsol’a yazarız ya, bir tür konsolumsu bir
şey icat etmem gerek.&lt;/p&gt;

&lt;h2&gt;Bash Completion&lt;/h2&gt;

&lt;p&gt;Şimdi &lt;strong&gt;ne alaka ?&lt;/strong&gt; diyebilirsiniz. Geçtiğimiz günlerde &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; ile
uğraşırken işletim sisteminin default completion’arına bunu acaba nasıl
entegre ederimi araştırırken şöyle bir durumla karşılaştım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rake&amp;lt;TAB&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bastığım an bir kısım değişken set edilip geriye sonuçlar başka bir
değişkenlere atanarak dönüyor. Ben araya girip ekrana bir şey yazdırdığım
zaman &lt;code&gt;readline&lt;/code&gt;’ı bozmuş oluyorum. Araya girip gelen/giden argümanları bir
yere, bir &lt;strong&gt;middleware&lt;/strong&gt; gibi (&lt;em&gt;aaah aah console.log&lt;/em&gt;) yazmanın yolunu ararken
birden &lt;code&gt;/tmp/log&lt;/code&gt; diye bir dosyaya yazmak fikri geldi.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;foo &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /tmp/log

&lt;span class="c"&gt;# pro-tip&lt;/span&gt;
&lt;span class="c"&gt;# birden fazla echo’yu tek pipe ile append etmek!&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"line 1"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"line 2"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"line 3"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /tmp/log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ayrı bir Terminal tab’i açıp;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; /tmp/log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;yapınca &lt;strong&gt;real-time&lt;/strong&gt; aynı browser’ın konsolu gibi patır patır her şeyi
görebilir hale geldim. O zaman aynı taktiği kullanıp bundle içinden de &lt;code&gt;ruby&lt;/code&gt;
ile bunu yapayım?&lt;/p&gt;

&lt;h2&gt;Builtin Logger&lt;/h2&gt;

&lt;p&gt;Ruby 1.8.7 builtin logger’a sahip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;LOG_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/log'&lt;/span&gt;
&lt;span class="no"&gt;ROTATION_TIME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt; &lt;span class="c1"&gt;# saniye&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;LOG_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'daily'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ROTATION_TIME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bir şekilde DDD (&lt;em&gt;Domain Driven Design&lt;/em&gt;) kafasıyla bir yapı kurup, tüm
kullanacağım &lt;code&gt;class&lt;/code&gt; mı &lt;code&gt;module&lt;/code&gt; mu ne ise onlara bu &lt;code&gt;logger&lt;/code&gt;’u geçmeyi
planladım. TextMate Command’ı bir scope’a bağlayabiliyoruz. Yani TextMate’te
&lt;code&gt;python&lt;/code&gt; kodu yazmak için Python, &lt;code&gt;ruby&lt;/code&gt; için Ruby ya da &lt;code&gt;markdown&lt;/code&gt; yazmak
için Markdown scope’u seçmek gerekir. &lt;/p&gt;

&lt;p&gt;Bu sayede, scope’a göre özellik yapmak mümkün. Yani &lt;strong&gt;&lt;kbd&gt;⌥&lt;/kbd&gt;&lt;/strong&gt; +
&lt;kbd&gt;X&lt;/kbd&gt; (&lt;em&gt;Option + X&lt;/em&gt;) kombinasyonu, Python scope’unda bir iş yaparken,
Ruby scope’unda bam başka bir iş yapabilir. Python için linter yaptığıma göre
daha önceki bundle’da da yaptığım gibi &lt;code&gt;source.python&lt;/code&gt; scope’unda bu
işleri yapmaya karar verdim.&lt;/p&gt;

&lt;p&gt;Aynı scope’ta iki farklı şey olduğu için, birbirlerini ezmesinler diye
environment’tan bir değişken okuyup aç/kapa şeklinde bundle’ı enable/disable
yapıyordum. Yani Ruff Linter ile Python FMT çakışmasın diye;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TM_PYTHON_FMT_DISABLE=1     # Python FMT bundle’ı disable eder.
TM_PYRUFF_DISABLE=1         # Ruff bundle’ı disable eder.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şeklinde bir yapı kurdum. Hatta bir kere mail grubunda sormuştum, farklı
bundle’lar &lt;code&gt;will-save&lt;/code&gt; ya da &lt;code&gt;did-save&lt;/code&gt;’i kullanınca priority nasıl oluyor?
kim kimi eziyor? Şu cevap verilmişti:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;callback.document.did-save.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback.document.did-save.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callback.document.did-save.3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sonuna &lt;code&gt;.1&lt;/code&gt;, &lt;code&gt;.2&lt;/code&gt; gibi numara vererek bu önceliklendirme işi yapılıyormuş. Bu
bilgi aklımda, ufak ufak yaptıklarımı denemeye başladım.&lt;/p&gt;

&lt;h2&gt;Varan 2 : Race Condition&lt;/h2&gt;

&lt;p&gt;Bir baktım, ruff linter’ı run ederken ekranda sanki python-fmt’u çalıştırmışım
gibi hata mesajları gelmeye başladı. Hemen logger’ı diğer bundle’a da takınca
gerçekleri gördüm. Her iki bundle’da &lt;code&gt;source.python&lt;/code&gt; scope’unda olduğu için,
benim execution’ı kesmemin bir anlamı yokmuş. Her seferinde &lt;code&gt;will-save&lt;/code&gt; ve
&lt;code&gt;did-save&lt;/code&gt; çalışıyor :) O an anladım ki, her bundle için ayrı bir scope yapmak
lazım. &lt;/p&gt;

&lt;p&gt;Bunlar hiçbir yerde yazmadığı için ben de şans eseri farkına vardım.
&lt;strong&gt;2008&lt;/strong&gt;’den beri bu şekilde kullanıyordum :) Hemen &lt;code&gt;source.python.fmt&lt;/code&gt; ve
&lt;code&gt;source.python.ruff&lt;/code&gt; diye iki yeni scope oluşturdum. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DOT-NOTATION&lt;/strong&gt;’ın şöyle bir güzelliği var, bu uydurduğum yeni scope’lar
aslında &lt;code&gt;source.python&lt;/code&gt;’un child scope’u bir tür &lt;strong&gt;sub-class&lt;/strong&gt;. Tüm özellikler
inherit (&lt;em&gt;miras geçiyor&lt;/em&gt;) ediyor. &lt;code&gt;source&lt;/code&gt;’un tüm özellikleri, &lt;code&gt;python&lt;/code&gt;’un
tüm özellikleri artık bu benim scope’larda da var. Bu özellikler neler?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Command binding’er&lt;/li&gt;
&lt;li&gt;Key press / Tab completion&lt;/li&gt;
&lt;li&gt;Syntax ve Grammar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yani kullanıcının hayatı değişmeden devam ediyor.&lt;/p&gt;

&lt;h2&gt;Varan 3 : Shared Storage&lt;/h2&gt;

&lt;p&gt;Logging işi tamam, scope’ları da çözdüm. Şimdi eventler arasında bir bağ
kurmam lazımdı. Keza eventler ayrı ayrı çıktı veriyordu ve &lt;code&gt;will-save&lt;/code&gt;’den
dönen bazı şeyleri &lt;code&gt;did-save&lt;/code&gt;’e aktarmam lazımdı. Bir &lt;strong&gt;database&lt;/strong&gt; olsa ya da
&lt;strong&gt;REDIS&lt;/strong&gt; olsa oradan okusam yazsam. Acaba TextMate’in bu iş için bir API
desteği var mıydı? Tabiiki yoktu :) Bir an için in-memory SQLITE bile düşündüm.&lt;/p&gt;

&lt;p&gt;O zaman tek şansım aynı logger’daki gibi yine &lt;code&gt;/tmp/&lt;/code&gt; altında bir dosyaya
yazıp okumak ve duruma göre silmek!&lt;/p&gt;

&lt;p&gt;Ekstradan bir &lt;strong&gt;DISK I/O&lt;/strong&gt; operasyonu, minik bir yük&amp;hellip; Makineler güçlü,
diskler hızlı o kadar olsun diyerek bu fikre sımsıkı sarıldım. Peki dosyayı
hangi isimle kaydetmem lazımdı? Örneğin kullanıcı &lt;code&gt;foo.py&lt;/code&gt; diye bir dosyada
çalışıyor, hata ya da başka bir iş için storage ne diye kaydedecekti kayıt
edeceği şeyi?&lt;/p&gt;

&lt;p&gt;İki farklı proje, ikisinde de &lt;code&gt;foo.py&lt;/code&gt; olsa, mesela kullanıcı Django
projesinde çalışsa her iki projede de &lt;code&gt;manage.py&lt;/code&gt; olacak :) Ne yapacağım
FULL-PATH mi yazacağım &lt;code&gt;/tmp/&lt;/code&gt; altına? O an bir şimşek çaktı!
&lt;code&gt;TM_DOCUMENT_UUID&lt;/code&gt;. Her açılan dosya / pencere için unique bir &lt;strong&gt;ID&lt;/strong&gt; veriyor
TextMate &lt;code&gt;UUID&lt;/code&gt; formatında.&lt;/p&gt;

&lt;p&gt;O zaman &lt;code&gt;/tmp/textmate-fmt-88F0A351-BBF2-4F8B-90C0-61B4A729B903&lt;/code&gt; şeklinde
dinamik olarak dosyaların ne olduğuyla ya da adıyla cebelleşmeden işi
çözebilirdim.&lt;/p&gt;

&lt;h2&gt;Python Kafasıyla Ruby Yazmak&lt;/h2&gt;

&lt;p&gt;Dedim ya, uzun zamandır &lt;code&gt;ruby&lt;/code&gt; ile uğraşmıyorum. &lt;code&gt;ruby&lt;/code&gt;’de &lt;strong&gt;mixin&lt;/strong&gt; yaklaşımı
var, &lt;code&gt;python&lt;/code&gt; gibi &lt;strong&gt;multiple inheritance&lt;/strong&gt; yok. Mixin’leri &lt;code&gt;class&lt;/code&gt;’a
&lt;code&gt;include&lt;/code&gt; edebilirim. &lt;code&gt;class&lt;/code&gt; yerine &lt;code&gt;module&lt;/code&gt; kullanmak istiyorum, &lt;code&gt;Logging&lt;/code&gt;,
&lt;code&gt;Storage&lt;/code&gt;, &lt;code&gt;Helpers&lt;/code&gt; gibi&amp;hellip; Birbirlerine takarak istediğim yapıyı kurmak
istiyorum.&lt;/p&gt;

&lt;p&gt;Önce saçma sapan bir şeyler yaparak istediğime yakın bir yapı kurdum ama
modül içinde constant’ları yanlış ekledim;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lib/constants.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Constants&lt;/span&gt;
  &lt;span class="no"&gt;TM_PYRUFF_DISABLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"TM_PYRUFF_DISABLE"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ruff_linter.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"TM_BUNDLE_SUPPORT"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/lib/constants"&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;RuffLinter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enabled?&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="no"&gt;Constants&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TM_PYRUFF_DISABLE&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kendi kendime soruyorum; neden &lt;code&gt;Constants::TM_PYRUFF_DISABLE&lt;/code&gt; çağırıyorum?
neden &lt;code&gt;RuffLinter&lt;/code&gt;’ın bir parçası gibi olmadı? Sonra yaptığım saçmalığı anlayıp
düzelttim:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruff_linter.rb&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"TM_BUNDLE_SUPPORT"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/lib/constants"&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;RuffLinter&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Constants&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;enabled?&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="no"&gt;TM_PYRUFF_DISABLE&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bunun yanı sıra; &lt;strong&gt;Ruby&lt;/strong&gt; ve &lt;strong&gt;Python&lt;/strong&gt; birbirine çok benziyor syntax olarak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;   &lt;span class="c1"&gt;# bu bir array (ruby)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ve bu;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;   &lt;span class="c1"&gt;# bu bir list (python)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python’da &lt;strong&gt;Truthy&lt;/strong&gt; ve &lt;strong&gt;Falsy&lt;/strong&gt; değerleri var. Boş &lt;code&gt;list&lt;/code&gt; (&lt;em&gt;array&lt;/em&gt;) Python
için &lt;code&gt;Falsy&lt;/code&gt; değer. Yani;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ok'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sonuç; hiçbir şey print edilmez!. Benim kafa &lt;code&gt;python&lt;/code&gt;’da olduğu için; &lt;code&gt;ruby&lt;/code&gt;’de
de o şekilde yazdım&amp;hellip; ve büyük patladım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"ok"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bir sürü şeyi düzeltmek zorunda kaldım. Güncel Ruby’de (&lt;em&gt;v3+&lt;/em&gt;) olan neredeyse
hiçbir şey 1.8.7’de henüz implemente edilmemiş&amp;hellip; Zamanda geri yolculuk gibi.&lt;/p&gt;

&lt;h2&gt;TextMate UI Elementleri&lt;/h2&gt;

&lt;p&gt;Bazı builtin gelen bundle’larda ekranda UI elementleri çıkaran oradan seçim
yaptıran şeyler görmüştüm. Hatta &lt;code&gt;AppleScript&lt;/code&gt; ile entegre olup, bundle’ı
run edip shell &lt;code&gt;osascript&lt;/code&gt; ile çalıştırıp input alıp TextMate’e geri dönmek
gibi imkanlar da vardı. Hemen builtin bundle support dizinine gidip ne var
ne yok bir bakayım dedim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ui.rb&lt;/code&gt; diye bir kütüphane, bir daldım içinde, &lt;code&gt;autocompletion&lt;/code&gt;’dan 
(&lt;em&gt;bildiğimiz modern bir completion değil ama iş görür&lt;/em&gt;) tutun da,
kullanıcıdan secure input (&lt;em&gt;keychain entegreli&lt;/em&gt;), renki tool tip’ler, içinde
&lt;code&gt;html&lt;/code&gt; metin gösterme widget’ları, modal dialog’lar, progress bar, web
preview&amp;hellip; Yıllarca &lt;strong&gt;nasıl yaparım ?&lt;/strong&gt; diye düşündüğüm her şey elimin altındaymış
ve benim bundan haberim yok :)&lt;/p&gt;

&lt;p&gt;Artık olayı kafayı taktığım için kendi screencast sitesine bakmaya karar verdim.
Çok eskiden izlemiş hatta kaydetmiştim. Site halen yaşıyor mu diye bir bakayım
dedim:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://macromates.com/screencasts"&gt;https://macromates.com/screencasts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bazı linkler çalışmıyordu onları web archive’dan buldum. Direkt olarak
macos’un &lt;code&gt;nib&lt;/code&gt;’lerini kullanarak yani &lt;strong&gt;Interface Builder&lt;/strong&gt; ile istediğin şeyi
yapıp TextMate’in içinden çağırmamın mümkün olduğunu &lt;strong&gt;12 YIL&lt;/strong&gt; gecikmeli
olarak öğrendim.&lt;/p&gt;

&lt;p&gt;İçinden çıkanlar eski işlemci mimarisine göre derlendiği için M işlemcide
çalışamıyordu. Mucizevi bir şekilde &lt;code&gt;CocoaDialog.app&lt;/code&gt; çalışıyordu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# bir kısım derlenmiş binary’ler çıktı.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/bin/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;İlk iş olarak içinden çıkan &lt;code&gt;simple_notification&lt;/code&gt; ve &lt;code&gt;alert&lt;/code&gt;’i kullandım.
Hızla kaybolan &lt;code&gt;tool tip&lt;/code&gt; yerine ekranda bir alert gösterip &lt;strong&gt;OK&lt;/strong&gt; ya da
&lt;strong&gt;CANCEL&lt;/strong&gt; gibi kafama göre (&lt;em&gt;max 3 buton&lt;/em&gt;) buton ekleyebildiğim bir şeyim
olmuştu. Ne yazık ki bu heves de kursağımda kaldı çünkü random bir şekilde
TextMate çakılmaya başladı bunları kullandıktan sonra. Çalışması bile benim
için mucizeydi, en azından çakılana kadar istediğimi yapma şansım oldu.&lt;/p&gt;

&lt;p&gt;İşin tehlikeli tarafı, o çıkan alert TextMate’in hali hazırdaki default
alert’i. Yani &lt;strong&gt;pencereyi kapat&lt;/strong&gt; dediğimizde 
&lt;strong&gt;kaydetmeden çıkıyorsunuz emin misiniz?&lt;/strong&gt; sorusunu soran UI elementi ile aynı. 
Tek farkı ben onu ruby’den çağırıyorum TextMate ise onu original olarak &lt;code&gt;C++&lt;/code&gt; ya da 
&lt;code&gt;Objective-C&lt;/code&gt;’den çağırıyordu.&lt;/p&gt;

&lt;p&gt;Mecburen eldeki çalışan tool tip’e geri dönmek zorunda kaldım.&lt;/p&gt;

&lt;h2&gt;Go to Errors&lt;/h2&gt;

&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;span class="player-status"&gt;▶&lt;/span&gt;&lt;img class="shadow animate"  data-play="/public/images/posts/2024-05-16-textmate-guttter.gif"  title="TextMate2 Editor gutter ekran görüntüsü" src="/public/images/posts/2024-05-16-textmate-guttter.png" alt="TextMate2 Editor gutter ekran görüntüsü"&gt;&lt;/figure&gt;&lt;p&gt; Gutter’a tıklayarak hatayı görüntüleme 
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Linter’ı çalışıp kurala uymayan satırları tespit ettikten sonra, ilgili
satırı &lt;strong&gt;mark&lt;/strong&gt; edebiliyoruz. Satır sayısı az olunca yukarı aşağı hareket
ederken göz ucuyla sol kısma bakıp, tıklayıp ne sorun olduğunu görüyoruz.&lt;/p&gt;

&lt;p&gt;Bahsettiğim gibi, &lt;strong&gt;tool tip&lt;/strong&gt; mouse üzerinden gidince otomatik olarak
kaybolduğu için, sürekli kod içinde hareket ederek sol taraftaki &lt;strong&gt;gutter&lt;/strong&gt;’a
bakmak gerekiyor. Arada mesafe olunca bu bazen işkenceye dönüşebiliyor.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TextMate::UI&lt;/code&gt; elementleri kurcalarken bir baktım tam benlik bir element var:
&lt;code&gt;TextMate::UI.menu&lt;/code&gt;. Yapmam gereken hataları bir &lt;code&gt;Array&lt;/code&gt;’de tutup bu elemente
vermek ama sorun şu; her şey asenkron ve bağımsız çalışıyor. Linter işini
bitirdikten sonra sonucu bir yere yazmam lazım ki bir tuş kombinasyonuna
basıldığı zaman oradan sonucu okuyup &lt;code&gt;UI.menu&lt;/code&gt;’ye verebileyim:&lt;/p&gt;

&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;span class="player-status"&gt;▶&lt;/span&gt;&lt;img class="shadow animate"  data-play="/public/images/posts/2024-05-16-textmate-goto-error.gif"  title="TextMate2 Editor ekran görüntüsü" src="/public/images/posts/2024-05-16-textmate-goto-error.png" alt="TextMate2 Editor ekran görüntüsü"&gt;&lt;/figure&gt;&lt;p&gt; &lt;strong&gt;&lt;kbd&gt;⌥&lt;/kbd&gt;&lt;/strong&gt; + &lt;kbd&gt;G&lt;/kbd&gt; (Option + G) ile Go to Error 
&lt;/p&gt;&lt;/div&gt;

&lt;h2&gt;Bash Bilgilerimizi Tazeleyelim&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ruff&lt;/code&gt;’ın çıktısı &lt;code&gt;json&lt;/code&gt; olarak alamadığım için (&lt;em&gt;1.8.7’de json yok&lt;/em&gt;) bazı 
şeyleri bolca &lt;code&gt;regex&lt;/code&gt; kullanarak ve &lt;code&gt;bash&lt;/code&gt; araçları kullanarak çözmek zorunda 
kaldım. Bu esnada macOS - BSD kaynaklı &lt;code&gt;grep&lt;/code&gt; farkları ile boğuşmak zorunda 
kaldım. Tüm komutların &lt;strong&gt;gnu&lt;/strong&gt; versiyonları var ama kullanıcının kendi
tarafında &lt;code&gt;gnutools&lt;/code&gt;, &lt;code&gt;gnuawk&lt;/code&gt;, &lt;code&gt;gnused&lt;/code&gt; gibi gnu tabanlı şeyleri kurması 
gerecekti.&lt;/p&gt;

&lt;p&gt;Mecburen eldeki eski araçlarla çıktıları kes, biç, ayır, grep’le gibi olaylara
girmek zorunda kaldım. &lt;code&gt;cut&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt; gibi araçları
bolca kullandım.&lt;/p&gt;

&lt;h2&gt;Sonuç&lt;/h2&gt;

&lt;p&gt;Belkide &lt;strong&gt;2&lt;/strong&gt; ya da &lt;strong&gt;3&lt;/strong&gt; kişinin (&lt;em&gt;ben dahil&lt;/em&gt;) kullanma ihtimali olan, ve bir
sonraki macOS sürümünde &lt;strong&gt;%99&lt;/strong&gt; ihtimalle artık çalışamayacak bir program için
geceleri geç saatlere kadar debelendim büyük bir zevkle. &lt;/p&gt;

&lt;p&gt;Çok uğraştım ve unuttuğum konuları tekrar hatırladım, bildiklerimi pekiştirdim
ve en güzeli de; günlük mesaimde çalıştığım projeyi süper hızlı bir şekilde,
kimi zaman elle, kimi zaman otomatik (&lt;em&gt;autfix özelliği var!&lt;/em&gt;) olarak
tereyağından kıl çeker gibi refactor etmeyi başardım (&lt;em&gt;tam bitmedi ama&lt;/em&gt;)&amp;hellip;&lt;/p&gt;

&lt;p&gt;Tamamen &lt;strong&gt;açık-kaynak&lt;/strong&gt;, herkes katkı sağlayabilir ve tepe tepe kullanabilir.
Son olarak, ChatGPT’ye özel teşekkürlerimi sunuyorum. O olmasa Ruby 1.8.7
tarafında çok sıkıntı çekerdim, işleri süper hızlandırdı. Çoğu zaman uydurma
bilgiler verse bile bana ışık tuttu, bir ipucu sağladı. Bazen inanılmaz
şekilde TextMate ile ilgili de doğru cevaplar verdi, nereden öğrendi nasıl
bildi orasını çok merak ediyorum.&lt;/p&gt;

&lt;p&gt;Bir süredir blog post da yapmamıştım, bahaneyle sitemde minik güncellemeler de
yaptım. Eğer denemek isterseniz;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vigo/textmate2-ruff-linter"&gt;https://github.com/vigo/textmate2-ruff-linter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>TextMate için Go Modify Tags Eklentisi</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2023/10/15/textmate-icin-go-modify-tags-eklentisi/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2023/10/15/textmate-icin-go-modify-tags-eklentisi/</id>
    <published>2023-10-15T22:45:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;Bir gün yine açmışım &lt;a href="https://github.com/textmate/textmate"&gt;TextMate2&lt;/a&gt;’i,
acaba yeni ne ekleyebilirim diye bakarken kendimi Fatih’in &lt;a href="https://github.com/fatih/gomodifytags"&gt;gomodifytags&lt;/a&gt;
reposunda buldum. Işık hızıyla gaza geldim. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vigo/textmate2-gomodifytags"&gt;https://github.com/vigo/textmate2-gomodifytags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Önce ilgili go paketlerini kurmak gerekiyor;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;go &lt;span class="nb"&gt;install &lt;/span&gt;github.com/fatih/gomodifytags@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mutlaka TextMate’in PATH’inde kendi go path’iniz de eklenmiş olmalı;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;go &lt;span class="nb"&gt;env &lt;/span&gt;GOPATH
&lt;span class="c"&gt;# buradaki değeri alın; TextMate &amp;gt; Settings &amp;gt; Variables’da PATH’e ekleyin&lt;/span&gt;
&lt;span class="c"&gt;# [x] PATH &amp;lt;ALDIĞINIZ-DEĞER&amp;gt;:&amp;lt;ÖNCEKİ-DEĞERİ&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Benim &lt;code&gt;go&lt;/code&gt; ile ilgili kurulumlarım &lt;code&gt;~/.local/go&lt;/code&gt; altında; dolayısıyla 
&lt;code&gt;go install ...&lt;/code&gt; şeklinde kurulum yapınca executable dosyalar da 
&lt;code&gt;~/.local/go/bin&lt;/code&gt; altında duruyor. Benim ayarım şu şekilde:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;&lt;/th&gt;
&lt;th style="text-align: left"&gt;Variable Name&lt;/th&gt;
&lt;th style="text-align: left"&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;[x]&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;code&gt;/Users/vigo/.local/go/bin:$PATH&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Şimdi bundle’ı kuralım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Library/Application&lt;span class="se"&gt;\ &lt;/span&gt;Support/TextMate/Bundles/
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/vigo/textmate2-gomodifytags.git GoModifyTags.tmbundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;img class="shadow"  title="TextMate2 için gomodifytags bundle animasyon gif" src="https://raw.githubusercontent.com/vigo/textmate2-gomodifytags/main/screens/tm2-gomodifytags.gif" alt="TextMate2 için gomodifytags bundle animasyon gif"&gt;&lt;/figure&gt;&lt;p&gt; TextMate2’den ekran görüntüsü 
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Kod içinde &lt;code&gt;struct&lt;/code&gt; ile ilgili bir &lt;strong&gt;selection&lt;/strong&gt; yapıp otomatik olarak
&lt;strong&gt;annotation&lt;/strong&gt; yapabiliyorsunuz. Otomatik olarak &lt;code&gt;json&amp;quot;...&amp;quot;&lt;/code&gt; tag’leri
ekle/çıkar gibi.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>TextMate için Ruff-Linter Eklentisi</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2023/03/12/textmate-icin-ruff-linter-eklentisi/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2023/03/12/textmate-icin-ruff-linter-eklentisi/</id>
    <published>2023-03-12T21:29:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;Yıl &lt;strong&gt;2023&lt;/strong&gt;, ben halen tek dişi kalmış canavar olan
&lt;a href="https://github.com/textmate/textmate"&gt;TextMate2&lt;/a&gt;’i kullanmaya devam ediyorum.
Yetmezmiş gibi küçük-tefek eklentiler yazıp kendimce ölüyü diri tutmaya gayret
ediyorum. &lt;/p&gt;

&lt;p&gt;Geçtiğimiz günlerde &lt;a href="https://www.youtube.com/watch?v=jeoL4qsSLbE"&gt;YouTube&lt;/a&gt;’da &lt;a href="https://github.com/charliermarsh/"&gt;Charlie Marsh&lt;/a&gt;’ı izledim. Kendisi
Python için &lt;code&gt;rust&lt;/code&gt; ile geliştirdiği (&lt;em&gt;evet, python değil, başka bir dil&lt;/em&gt;)
&lt;code&gt;ruff&lt;/code&gt; adlı linter’ı anlatıyordu. Modern IDE’lerin neredeyse tümü bu eklentiyi
sunuyordu.&lt;/p&gt;

&lt;p&gt;Bu eklenti, hızlıca &lt;strong&gt;python&lt;/strong&gt; kodunuzu ya da projenizi tarayıp hataları
gösteriyordu. Sadece göstermekle kalmıyor, bazılarını da otomatik olarak
düzeltebiliyordu. İşin güzel yanı, pek çok bilinen aracın (&lt;code&gt;flake8&lt;/code&gt;,
&lt;code&gt;pydocstyle&lt;/code&gt;, &lt;code&gt;isort&lt;/code&gt; &lt;em&gt;ve çok dahası&lt;/em&gt;) sağladığı özellikleri bire-bir sağlıyor
ve ek olarak da sizi ilave paket kurulumu/ayarlamalarından kurtarıyordu.&lt;/p&gt;

&lt;p&gt;Esas güzel kısmı ise çok hızlı çalışması. Hızdan sonra en çok beğendiğim
özelliği ise, size hatayı nasıl çözebileceğinizi anlatan döküman üretme
seçeneği. Örneğin; hata kodu &lt;code&gt;ANN001&lt;/code&gt;, acaba nasıl çözülür? hemen detaya
girebilirsiniz;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ruff rule ANN001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;çıktısı &lt;code&gt;markdown&lt;/code&gt; formatında geliyor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# missing-type-function-argument (ANN001)

Derived from the **flake8-annotations** linter.

## What it does
Checks that function arguments have type annotations.

## Why is this bad?
Type annotations are a good way to document the types of function arguments. They also
help catch bugs, when used alongside a type checker, by ensuring that the types of
any provided arguments match expectation.

## Example
```python
def foo(x):
    ...
```

Use instead:

```python
def foo(x: int):
    ...
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ben de bunları görüp gaza geldim :) Zaten uzunca zamandır kendi yazdığım başka
bir &lt;a href="https://github.com/vigo/textmate2-python-fmt"&gt;Python eklentisini&lt;/a&gt; kullanıyordum. Hemen kollayı sıvadım ve giriştim
hızla! Python scope’unda kod yazarken &lt;strong&gt;save&lt;/strong&gt; yapınca linter devreye giriyor.&lt;/p&gt;

&lt;div class="full zoomable"&gt;&lt;figure class="image"&gt;&lt;img class="shadow"  title="Ruff-Linter çalışırken" src="/public/images/posts/2023-02-24-ruff-markers.gif" alt="Ruff-Linter çalışırken"&gt;&lt;/figure&gt;&lt;p&gt; TextMate2’den ekran görüntüsü 
&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/PyCQA/pylint"&gt;Pylint&lt;/a&gt; kadar süper olmasa da hız bakımından tercih sebebidir. Proje
büyüdükçe, &lt;code&gt;pylint&lt;/code&gt;’in çalışıp sonuç dönmesi çok uzun sürebiliyor. Bazen
5-10sn’lere çıktığımı biliyorum. Uzun zamandır python’la uğraşmayan biri
olarak beni bile gaza getirdi &lt;code&gt;ruff&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Merak edenler ya da katkı yapmak isteyenler;
&lt;a href="https://github.com/vigo/textmate2-ruff-linter"&gt;https://github.com/vigo/textmate2-ruff-linter&lt;/a&gt; adresinden eklentiye
ulaşabilir.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Yeniden Merhaba Dünya V6</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2022/08/13/merhaba-dunya/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2022/08/13/merhaba-dunya/</id>
    <published>2022-08-13T21:33:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;Uzunca zamandır aklımdaydı, sitemi güncellemek istiyordum. Özellikle &lt;code&gt;ruby&lt;/code&gt;
bağımlılıkları, &lt;code&gt;middleman&lt;/code&gt;’in yeni versiyonuna geçmek gibi planlarım vardı.
&lt;/p&gt;

&lt;p&gt;Kolay olsun diye tercih ettiğim &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt; bir süre
sonra ayağıma dolanmaya başladı. Bir el atıp güncellemeleri yapmak gerekiyordu.
Sitedeki bazı aksaklıklar yüzünden blog yazma hevesim de kırılıyordu. Nihayet
bir zaman aralığı bulup komple giriştim siteye&amp;hellip;&lt;/p&gt;

&lt;p&gt;Eski yazıların üstünden geçtim. Bazı yazılar ne yazık ki artık geçerliliğini
kaybetmiş. Bahsettiğim bir servis artık yayında değil, ya da övdüğüm bir araç
artık yok. Hatta bazı şeyler o kadar değişmiş ki, yazının da bir anlamı
kalmamış.&lt;/p&gt;

&lt;p&gt;Resimleri düzenledim, yazılarda ufak tefek tahsihler yaptım. Neticede tekrar
bir gazla blog yazmaya heveslendim.&lt;/p&gt;

&lt;p&gt;Neler kullandım;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yine &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt; ve &lt;a href="https://ruby-lang.org"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript için tabiiki &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSS için &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;İkonlar için &lt;a href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hosting için yine &lt;a href="https://pages.github.com/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Umarım daha sık ve düzenli olarak yazarım! Keyifli okumalar!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Olmazsa Olmaz Golang Kütüphaneleri</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2021/09/26/olmazsa-olmaz-golang-kutuphaneleri/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2021/09/26/olmazsa-olmaz-golang-kutuphaneleri/</id>
    <published>2021-09-26T13:45:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;İster komut satırı aracı, ister kütüphane ya da servis geliştirirken bazı 3.parti
kütüphaneler / yardımcılar, hayatımızı kolaylaştırır. Bu yazımda sizlere sık
kullandığım paketlerden bahsedeceğim.&lt;/p&gt;

&lt;h3&gt;github.com/go-playground/validator &lt;span style="vertical-align: middle;" class="tag is-info"&gt;yeni&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/go-playground/validator"&gt;https://github.com/go-playground/validator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veri validasyonu için kullanıyorum. Elinizdeki &lt;code&gt;string&lt;/code&gt; acaba geçerli bir
e-posta değeri mi? &lt;code&gt;struct&lt;/code&gt; içindeki alanların duruma göre diğer alana
göre kontrolü gibi işler için ideal.&lt;/p&gt;

&lt;h3&gt;go.uber.org/zap &lt;span style="vertical-align: middle;" class="tag is-info"&gt;yeni&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/uber-go/zap"&gt;https://github.com/uber-go/zap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yapılandırılmış, alan-alan ayrıştırabileceğiniz hızlı bir log kütüphanesi.&lt;/p&gt;

&lt;h3&gt;github.com/DATA-DOG/go-sqlmock &lt;span style="vertical-align: middle;" class="tag is-info"&gt;yeni&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/DATA-DOG/go-sqlmock"&gt;https://github.com/DATA-DOG/go-sqlmock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Standart kütüphane ile gelen sql driver’ını kullanarak size mocking yapmayı
sağlıyor. Sql driver’ı taklit ederek sahte sorgular ve sonuçlar elde
edebilirsiniz.&lt;/p&gt;

&lt;h3&gt;github.com/fatih/color&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/fatih/color"&gt;https://github.com/fatih/color&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;İçimizden biri, rock star’ımız sevgili Fatih Arslan tarafından geliştirilen ve
daha sonra da pek çok kişi tarafından katkı sağlanan &lt;code&gt;color&lt;/code&gt; paketi. Kullanımı
çok kolay. Komut satırı uygulamalarınızı renklendirmek istiyorsanız bu paketi
mutlaka kullanmalısınız.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go get github.com/fatih/color
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;github.com/pkg/errors&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/pkg/errors"&gt;https://github.com/pkg/errors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Error’leri yönetmek, error’lere ilave mesaj eklemek, bir error’ü wrap/unwrap
etmek gibi pek çok işi bizim adımıza yapan olmazsa olmaz kütüphanelerden biri de
&lt;code&gt;errors&lt;/code&gt; paketi.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go get github.com/pkg/errors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;github.com/alexeyco/simpletable&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/alexeyco/simpletable"&gt;https://github.com/alexeyco/simpletable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ruby’de çok sevdiğim &lt;a href="https://github.com/tj/terminal-table"&gt;terminal-table&lt;/a&gt;’ın
golang versiyonu. Terminal’de aynı html table’ları gibi tabular gösterim
yapmanızı sağlıyor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go get &lt;span class="nt"&gt;-u&lt;/span&gt; github.com/alexeyco/simpletable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;github.com/urfave/cli&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/urfave/cli"&gt;https://github.com/urfave/cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sevgili &lt;a href="https://github.com/cenkalti/"&gt;Cenk Altı&lt;/a&gt; sayesinde haberdar olduğum
harika bir &lt;code&gt;cli&lt;/code&gt; geliştirme aracı. Pek çok işi o kadar kolay hale getiriyor ve
kolaylaştırıyor ki&amp;hellip; Daha önce başka araçları deneyip hatta hiç araç
kullanmadan uğraşıp yaptığım şeyleri inanılmaz derecede kolay ve hızlı bir
şekilde yapmamı sağlıyor &lt;code&gt;urfave/cli&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go get github.com/urfave/cli/v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;github.com/codingconcepts/env&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/codingconcepts/env"&gt;https://github.com/codingconcepts/env&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uygulamanız içinde environment variable’ları yönetmenizi sağlayan güzel bir
kütüphane &lt;code&gt;env&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;codingconcepts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;github.com/cosmtrek/air&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/cosmtrek/air"&gt;https://github.com/cosmtrek/air&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Özellikle servis/server gibi işlerinizde, geliştirme yaparken &lt;strong&gt;hot reload&lt;/strong&gt;
yapmak isterseniz, yani herhangi bir &lt;code&gt;.go&lt;/code&gt; dosyasını kaydettiğinizde,
uygulamanın otomatik olarak tekrar derlenip çalışması için &lt;code&gt;air&lt;/code&gt;, yani sizin
uygulamayı elle durdurup tekrar çalıştırma işi yapmamanız için harika bir
çözüm!&lt;/p&gt;

&lt;h3&gt;github.com/google/uuid &lt;span style="vertical-align: middle;" class="tag is-info"&gt;güncelleme&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/google/uuid"&gt;https://github.com/google/uuid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UUID&lt;/code&gt; gereken yerlerde işinize yarayacak güzel bir kütüphane.&lt;/p&gt;

&lt;h3&gt;github.com/stretchr/testify&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/stretchr/testify"&gt;https://github.com/stretchr/testify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yine ruby’den kalma alışkanlıklarım beni bu kütüphaneyi bulmamı ve kullanmamı
sağladı. Test yazarken &lt;q&gt;keşke ruby’deki minitest gibi bir kütüphane olsa,
assertion işlerini basitçe halledebilsem&lt;/q&gt; demiştim ve bir google aramasından
sonra &lt;code&gt;testify&lt;/code&gt; ile tanışıp bir daha da bırakamadım.&lt;/p&gt;

&lt;p&gt;Sadece assertion değil mocking ve benzeri diğer yardımcılarla beraber geliyor!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stretchr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;testify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;p&gt;Günlük işlerde sıklıkla kullandığım kütüphanelerin bazılarını tanıtmaya
çalıştım. Bunların dışında da kullandığımız paketler hatta framework’ler,
network client’ları, veritabanı client’ları, websocket, tcp sunucu
framework’leri gibi daha geniş yardımcılar da bulunmakta.&lt;/p&gt;

&lt;p&gt;Daha fazla araç ve bilgi için &lt;a href="https://github.com/avelino/awesome-go"&gt;https://github.com/avelino/awesome-go&lt;/a&gt; adresine bakabilirsiniz!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>JSON İşleme Aracı: jq</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2021/08/28/json-isleme-araci-jq/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2021/08/28/json-isleme-araci-jq/</id>
    <published>2021-08-28T11:38:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; dosya formatı artık hayatımızın vazgeçilmezi. Gündelik hayatta hep
onunla işimiz oluyor. Peki bir araç olsa, istediğimiz gibi filtreleme
yapsak, hem de hiç kod yazmasak?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Sizi harika bir araçla tanıştırmak istiyorum: &lt;code&gt;jq&lt;/code&gt;. &lt;code&gt;jq&lt;/code&gt; süper hızlı çalışan
hafif siklet bir komut satırı aracı. Tüm platformlarda var. macOS kullanıcıları
hemen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;jq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ile kurabilir. Elle kurmak için &lt;a href="https://stedolan.github.io/jq/"&gt;sitesinden&lt;/a&gt; indirip kurulum yapabilirsiniz.
Eğer kurulum yapmak istemezseniz, &lt;a href="https://jqplay.org/"&gt;web tarayıcısı&lt;/a&gt; üzerinden de kullanabilirsiniz.
&lt;a href="https://stedolan.github.io/jq/manual/"&gt;Dokümantasyonu&lt;/a&gt; ve nasıl kullanılacağına dair bir &lt;a href="https://stedolan.github.io/jq/tutorial/"&gt;tuturial&lt;/a&gt;’i de bulunuyor.&lt;/p&gt;

&lt;p&gt;Hemen ufak ufak girişelim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"x": 1, "y": 2}'&lt;/span&gt; | jq
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"x"&lt;/span&gt;: 1,
  &lt;span class="s2"&gt;"y"&lt;/span&gt;: 2
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"x": 1, "y": 2}'&lt;/span&gt; | jq .x
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elimizde &lt;code&gt;{key: value}&lt;/code&gt; şeklinde bulunan nesnelerde &lt;code&gt;.key&lt;/code&gt; mantığıyla veriye
ulaşabiliyoruz. Eğer iç-içe yani &lt;strong&gt;nested&lt;/strong&gt; key’ler varsa; &lt;code&gt;.key.key.key&lt;/code&gt; şeklinde
zincirleme ilerleyebiliyoruz. Bu durum &lt;strong&gt;Object Identifier-Index&lt;/strong&gt; olarak geçer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"x": {"a": "bu a değeri"}}'&lt;/span&gt; | jq .x.a
&lt;span class="s2"&gt;"bu a değeri"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Eğer &lt;strong&gt;key var mı?&lt;/strong&gt; diye bakmak istersek &lt;strong&gt;Optional Object Identifier-Index&lt;/strong&gt;
kullanırız:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"foo": 1, "bar": 2}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'.baz?'&lt;/span&gt;
null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yani &lt;code&gt;.key?&lt;/code&gt; şeklinde kullanılır. Eğer key yoksa sonuç &lt;code&gt;null&lt;/code&gt; döner. Genelde
elimizde hep bir liste yani &lt;strong&gt;Array&lt;/strong&gt; ve içinde de objeler olur:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1}, {"id": 2}]'&lt;/span&gt; | jq &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"id"&lt;/span&gt;: 1
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"id"&lt;/span&gt;: 2
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Eğer &lt;strong&gt;flat-map&lt;/strong&gt; yapmak istersek, yani aradan virgülü atmak;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1}, {"id": 2}]'&lt;/span&gt; | jq .[]
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: 2
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sadede &lt;code&gt;id&lt;/code&gt;’lerin değerlerini alalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1}, {"id": 2}]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'.[] | .id'&lt;/span&gt;
1
2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yani &lt;code&gt;jq &amp;#39;.[] | .id&amp;#39;&lt;/code&gt; şeklinde. Elimizde aşağıdaki gibi bir &lt;code&gt;json&lt;/code&gt; olsun:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vigo"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;İçinden sadece &lt;code&gt;.user&lt;/code&gt;’ı alalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"user": {"id": 1, "name": "vigo"}, "items": [1,2,3]}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'.user'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: 1,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"vigo"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aynı nesneden kopya bir liste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"x": 1}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'[. , . , .]'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 1
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 1
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 1
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;İşin sırrı &lt;code&gt;jq &amp;#39;[. , . , .]&amp;#39;&lt;/code&gt; bu kısında. &lt;code&gt;.&lt;/code&gt; elemanın kendisi oluyor. Elimizde
kullanıcıların listesi var mesela:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vigo"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lego"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"figo"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sadece &lt;code&gt;.name&lt;/code&gt;’leri alalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1, "name": "vigo"}, {"id": 2, "name": "lego"}, {"id": 3, "name": "figo"}]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'.[] | .name'&lt;/span&gt;
&lt;span class="s2"&gt;"vigo"&lt;/span&gt;
&lt;span class="s2"&gt;"lego"&lt;/span&gt;
&lt;span class="s2"&gt;"figo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Map Özelliği&lt;/h3&gt;

&lt;p&gt;Tüm programlama dillerinde bulunan, &lt;strong&gt;iterable&lt;/strong&gt; yani bir koleksiyonun içinde
tüm elemanları bir fonksiyondan geçirme işlemi. Elimizde sayılardan oluşan
bir liste var ver biz koleksiyon içindeki her sayıya bir ekleyeceğiz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[1,2,3,4,5]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'map(. + 1)'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  2,
  3,
  4,
  5,
  6
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;map(. + 1)&lt;/code&gt; -&amp;gt; &lt;code&gt;.&lt;/code&gt; elemanın kendisi, sonrasında &lt;code&gt;+&lt;/code&gt; operatör, &lt;code&gt;1&lt;/code&gt; de ekleyeceğimiz
değer. &lt;code&gt;.&lt;/code&gt; &lt;strong&gt;Identity&lt;/strong&gt; anlamındadır. Çarpma versiyonu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[1,2,3,4,5]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'map(. * 2)'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  2,
  4,
  6,
  8,
  10
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Eğer çıktıların daha kısa ve kompakt olmasını isterseniz &lt;code&gt;-c&lt;/code&gt; parametresini
kullanabiliriniz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[1,2,3,4,5]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'map(. * 2)'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;2,4,6,8,10]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şimdi elimizdeki aynı listeden bir transformasyon yapalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[1,2,3,4,5]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'map({"x": .})'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 1
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 2
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 3
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 4
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"x"&lt;/span&gt;: 5
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Fonksiyonlar&lt;/h3&gt;

&lt;p&gt;En sık kullandığım &lt;code&gt;length&lt;/code&gt; fonksiyonu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[1,2,3,4,5]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'length'&lt;/span&gt;
5

&lt;span class="nv"&gt;$ &lt;/span&gt;jq length /path/to/file.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elementin indeksini bulalım. &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; listesinde &lt;code&gt;2&lt;/code&gt;’nin indeksi &lt;code&gt;1&lt;/code&gt;’dir
yani 0. element: &lt;code&gt;1&lt;/code&gt;, 1.element de &lt;code&gt;2&lt;/code&gt;’dir ya, bunu &lt;code&gt;jq&lt;/code&gt; ile gelen &lt;code&gt;indices&lt;/code&gt;
fonksiyonunu kullanarak bulalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[1,2,3,4,5]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'indices(2)'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  1
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[1,2,3,4,5]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'indices(2) | .[]'&lt;/span&gt;
1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;String içinde pipe yaparak çıktıyı flat-map yaptık. &lt;code&gt;jq &amp;#39;komut | .[]&amp;#39;&lt;/code&gt; şeklinde.
Bir kısım fonksiyon örneği verelim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[2, 4, 6, 8]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'contains([2])'&lt;/span&gt;  &lt;span class="c"&gt;# true&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[2, 4, 6, 8]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'reverse'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;     &lt;span class="c"&gt;# [8,6,4,2]&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[2, 4, 6, 8]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'min'&lt;/span&gt;            &lt;span class="c"&gt;# 2&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[2, 4, 6, 8]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'max'&lt;/span&gt;            &lt;span class="c"&gt;# 8&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'"hello"'&lt;/span&gt; | jq &lt;span class="s1"&gt;'split("")'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;       &lt;span class="c"&gt;# ["h","e","l","l","o"]&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'"hello"'&lt;/span&gt; | jq &lt;span class="s1"&gt;'test("he*")'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;     &lt;span class="c"&gt;# true&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'"hello"'&lt;/span&gt; | jq &lt;span class="s1"&gt;'test("he*!")'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;    &lt;span class="c"&gt;# false&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'"hello"'&lt;/span&gt; | jq &lt;span class="s1"&gt;'contains("a")'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;   &lt;span class="c"&gt;# false&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'"hello"'&lt;/span&gt; | jq &lt;span class="s1"&gt;'startswith("h")'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;# true&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'"hello"'&lt;/span&gt; | jq &lt;span class="s1"&gt;'endswith("o")'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;   &lt;span class="c"&gt;# true&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"user": {"id": 1, "name": "vigo"}}, {"user": {"id": 2, "name": "ezel"}}]'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s1"&gt;'.[0] | keys'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;      &lt;span class="c"&gt;# ["user"]&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"user": {"id": 1, "name": "vigo"}}, {"user": {"id": 2, "name": "ezel"}}]'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s1"&gt;'.[0].user | keys'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;# ["id","name"]&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"id": 1, "name": "vigo"}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'has("id")'&lt;/span&gt; &lt;span class="c"&gt;# true&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"id": 1, "name": "vigo"}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'flatten'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;# [1,"vigo"]&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"user": {"id": 1, "name": "vigo"}}, {"user": {"id": 2, "name": "ezel"}}]'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s1"&gt;'.[0].user | flatten'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;# [1,"vigo"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;to_entries&lt;/code&gt; ile;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"id": 1, "name": "vigo"}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'to_entries'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"key"&lt;/span&gt;: &lt;span class="s2"&gt;"id"&lt;/span&gt;,
    &lt;span class="s2"&gt;"value"&lt;/span&gt;: 1
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"key"&lt;/span&gt;: &lt;span class="s2"&gt;"name"&lt;/span&gt;,
    &lt;span class="s2"&gt;"value"&lt;/span&gt;: &lt;span class="s2"&gt;"vigo"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şeklinde çıktı alırız. Diğer sevdiğim bir fonksiyon da &lt;code&gt;select&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# id’si 1 olanı alalım, select(.id == 1)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1, "name": "vigo"}, {"id": 2, "name": "ezel"}]'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s1"&gt;'.[] | select(.id == 1)'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: 1,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"vigo"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yaşı &lt;code&gt;10&lt;/code&gt;’dan küçükleri filtreleyelim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vigo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ezel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ve;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1, "name": "vigo", "age": 46}, {"id": 2, "name": "ezel", "age": 7}]'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s1"&gt;'.[] | select(.age &amp;lt; 10) | .name'&lt;/span&gt; &lt;span class="c"&gt;# "ezel"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;İşin püf noktası &lt;code&gt;&amp;#39;.[] | select(.age &amp;lt; 10) | .name&amp;#39;&lt;/code&gt; kısmında. &lt;code&gt;.[]&lt;/code&gt; ile liste
işlemi yapacağımızı, tek tek elemanı alacağımızı belirtip elemanı &lt;code&gt;|&lt;/code&gt; ile
&lt;code&gt;select&lt;/code&gt; fonksiyonuna &lt;code&gt;pipe&lt;/code&gt; ediyoruz. Fonksiyondan dönenin sadece &lt;code&gt;.name&lt;/code&gt;’ini
alıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; içinde bir kısım fonksiyonlarla geliyor. Detaylara
&lt;a href="https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions"&gt;buradan&lt;/a&gt; bakabilirsiniz.&lt;/p&gt;

&lt;h3&gt;Parantez, Array ve Obje Üreticileri&lt;/h3&gt;

&lt;p&gt;Parantez ile aynı matematik işlemlerindeki gibi öncelik ve gruplama işlerini
yapabiliriz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; | jq &lt;span class="s1"&gt;'(. + 2) * 5'&lt;/span&gt;
15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; identity idi, yani &lt;code&gt;1&lt;/code&gt;’in kendisi. &lt;code&gt;(1 + 2) * 5 -&amp;gt; 3 * 5 -&amp;gt; 15&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; ile &lt;strong&gt;Array Construction&lt;/strong&gt; yani liste üretebiliriz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vigo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"badges"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"ruby"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"golang"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şimdi bir çıktı üretelim ve tipi liste olsun:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"user": "vigo", "badges": ["python", "ruby", "golang"]}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'[.user, .badges]'&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;"vigo"&lt;/span&gt;,
  &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"python"&lt;/span&gt;,
    &lt;span class="s2"&gt;"ruby"&lt;/span&gt;,
    &lt;span class="s2"&gt;"golang"&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Şimdi &lt;code&gt;{}&lt;/code&gt; ile &lt;strong&gt;Object Construction&lt;/strong&gt; yapalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"user": "vigo", "badges": ["python", "ruby", "golang"]}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'{user, stack: .badges}'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"user"&lt;/span&gt;: &lt;span class="s2"&gt;"vigo"&lt;/span&gt;,
  &lt;span class="s2"&gt;"stack"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"python"&lt;/span&gt;,
    &lt;span class="s2"&gt;"ruby"&lt;/span&gt;,
    &lt;span class="s2"&gt;"golang"&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aynı veriden &lt;strong&gt;multiple-dict&lt;/strong&gt; üretelim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"user": "vigo", "badges": ["python", "ruby", "golang"]}'&lt;/span&gt; | jq &lt;span class="s1"&gt;'{user, stack: .badges[]}'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"user"&lt;/span&gt;: &lt;span class="s2"&gt;"vigo"&lt;/span&gt;,
  &lt;span class="s2"&gt;"stack"&lt;/span&gt;: &lt;span class="s2"&gt;"python"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"user"&lt;/span&gt;: &lt;span class="s2"&gt;"vigo"&lt;/span&gt;,
  &lt;span class="s2"&gt;"stack"&lt;/span&gt;: &lt;span class="s2"&gt;"ruby"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"user"&lt;/span&gt;: &lt;span class="s2"&gt;"vigo"&lt;/span&gt;,
  &lt;span class="s2"&gt;"stack"&lt;/span&gt;: &lt;span class="s2"&gt;"golang"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Durum Kontrolleri&lt;/h3&gt;

&lt;p&gt;Elimizde şöyle bir veri var:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vigo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"is_admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lego"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"is_admin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Admin ve standart kullanıcıları görelim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"name": "vigo", "is_admin": true}, {"name": "lego", "is_admin": false}]'&lt;/span&gt; | jq &lt;span class="s1"&gt;'.[] | if .is_admin == true then (.name + " is admin")  else (.name + " is standard user")  end'&lt;/span&gt;
&lt;span class="s2"&gt;"vigo is admin"&lt;/span&gt;
&lt;span class="s2"&gt;"lego is standard user"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Eldeki veriyi &lt;code&gt;csv&lt;/code&gt; formatına çevirebiliriz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1, "name": "vigo", "age": 46}, {"id": 2, "name": "ezel", "age": 7}]'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s1"&gt;'(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv'&lt;/span&gt;
&lt;span class="s2"&gt;"age"&lt;/span&gt;,&lt;span class="s2"&gt;"id"&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;
46,1,&lt;span class="s2"&gt;"vigo"&lt;/span&gt;
7,2,&lt;span class="s2"&gt;"ezel"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keza veriyi &lt;code&gt;xpath&lt;/code&gt; gibi görüntüleyebiliriz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'[{"id": 1, "name": "vigo", "age": 46}, {"id": 2, "name": "ezel", "age": 7}]'&lt;/span&gt; | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s1"&gt;'path(..) | map(tostring) | join("/")'&lt;/span&gt;

0
0/id
0/name
0/age
1
1/id
1/name
1/age
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Konfigürasyon Dosyası&lt;/h3&gt;

&lt;p&gt;Eğer isterseniz kendiniz özelleştirilmiş fonksiyonlar yapıp kullanabilirsiniz.
Bunun için &lt;code&gt;~/.jq&lt;/code&gt; dosyası oluşturmanız yeterli. Şimdi &lt;code&gt;schema&lt;/code&gt; diye
bir fonksiyon oluşturup &lt;code&gt;~/.jq&lt;/code&gt; dosyasına ekleyelim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'def schema: path(..) | map(tostring) | join("/");'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.jq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şimdi kullanalım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'{"data": {"users": [{"id": 1, "name": "vigo"},{"id": 2, "name": "ezel"}]}}'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s1"&gt;'schema'&lt;/span&gt;

&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="s2"&gt;"data"&lt;/span&gt;
&lt;span class="s2"&gt;"data/users"&lt;/span&gt;
&lt;span class="s2"&gt;"data/users/0"&lt;/span&gt;
&lt;span class="s2"&gt;"data/users/0/id"&lt;/span&gt;
&lt;span class="s2"&gt;"data/users/0/name"&lt;/span&gt;
&lt;span class="s2"&gt;"data/users/1"&lt;/span&gt;
&lt;span class="s2"&gt;"data/users/1/id"&lt;/span&gt;
&lt;span class="s2"&gt;"data/users/1/name"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; bir komut satırı araca olduğu için tüm dosya &lt;code&gt;pipe&lt;/code&gt; işlemleri de geçerli oluyor.
Kimi zaman &lt;code&gt;pretty-print&lt;/code&gt; yani çıktının güzel ve renkli görünmesi için, ya da dosyadan
okuyup başka bir yere paslamak için de kullanılır.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /path/to/file.json | jq
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /path/to/file.json | jq &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /path/to/output.json
&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-sL&lt;/span&gt; &lt;span class="s1"&gt;'https://api.github.com/repos/vigo/statoo/commits?per_page=1'&lt;/span&gt; | jq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ya da;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-sL&lt;/span&gt; &lt;span class="s1"&gt;'https://api.github.com/repos/vigo/statoo/commits?per_page=1'&lt;/span&gt; | jq &lt;span class="s1"&gt;'.[] | .commit.author'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"Uğur Özyılmazel"&lt;/span&gt;,
  &lt;span class="s2"&gt;"email"&lt;/span&gt;: &lt;span class="s2"&gt;"ugurozyilmazel@gmail.com"&lt;/span&gt;,
  &lt;span class="s2"&gt;"date"&lt;/span&gt;: &lt;span class="s2"&gt;"2021-08-27T10:14:12Z"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dediğim gibi, &lt;code&gt;jq&lt;/code&gt; benim gündelik hayatımda çok sık kullandığım bir araç. Ben
sadece bildiğim ve sık kullandığım konuları yazdım. Burada yazdıklarımdan çok
daha fazlası var. Umarım sizin de işinize yarar.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Django Model İpuçları</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2021/08/22/django-model-ipuclari/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2021/08/22/django-model-ipuclari/</id>
    <published>2021-08-22T09:43:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;Yaklaşık 2008’den beri Django geliştiriyorum. Pek çok proje yaptım. Model
tanımlamaları ile ilgili bazı edindiğim, okuduğum makalelerden öğrendiğim
şeyleri yazmak istedim.&lt;/p&gt;

&lt;h2&gt;Ana Kural&lt;/h2&gt;

&lt;p&gt;Mutlaka ama mutlaka değişken ve sınıf adlarını &lt;strong&gt;İngilizce&lt;/strong&gt; olarak kullanın.
Yarın projenizi açık-kaynak yaptığınızda ya da ekibinize Türkçe bilmeyen
biri katıldığında kodu kolay anlamalı.&lt;/p&gt;

&lt;h3&gt;Model Yazma Kuralları&lt;/h3&gt;

&lt;p&gt;Django bildiğiniz gibi muhteşem bir dokümantasyona sahip. Bizim için her ince
detay yazılmış, örnekler verilmiş. Lütfen kod yazma işine başlamadan
önce &lt;a href="https://docs.djangoproject.com/en/3.2/internals/contributing/writing-code/coding-style/#model-style"&gt;bu sayfaya&lt;/a&gt; gidin ve okuyun.&lt;/p&gt;

&lt;p&gt;Doküman derki, bir model içindeki method/attribute sıralaması aşağıdaki gibi
olmalıdır:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tüm field tanımları&lt;/li&gt;
&lt;li&gt;Custom manager attribute’ları&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class Meta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def __str__()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def save()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def get_absolute_url()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Kendi özel yazdığınız method, property ne varsa&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_group_creator_sentinel&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'deleted@xxx.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Sentinel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'User'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    User.objects.filter(group__name=...)
    Permission.objects.filter(group__name=...)
    """&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;creator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_group_creator_sentinel&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'creator_groups'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_query_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'creator'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'permissions_groups'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_query_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'permissions'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GroupManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'core'&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'groups'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;natural_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Doğru Model Adı&lt;/h3&gt;

&lt;p&gt;Model denen şey tek bir kaydı temsil eder. Bu bakımdan ismi tekil olmalıdır.
Eğer bu model ara tablo değilse, yani &lt;strong&gt;ManyToMany through&lt;/strong&gt; tablosu değilse
mutlaka tekil olmalıdır.&lt;/p&gt;

&lt;p&gt;İngilizce bazı kelimelerin tekil ve çoğul durumları farklıdır. Örneğin
&lt;strong&gt;People&lt;/strong&gt; kelimesi çoğuldur ve bunun tekili &lt;strong&gt;Person&lt;/strong&gt;’dır.&lt;/p&gt;

&lt;p&gt;Bu doğrultuda;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Post&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Article&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Person&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;şeklinde olmalıdır. Ama haber modeli diye bir model olacaksa o &lt;code&gt;News&lt;/code&gt; olur.&lt;/p&gt;

&lt;h3&gt;Tablolara Ad Verin&lt;/h3&gt;

&lt;p&gt;Mümkünse Database Tablo adını Kendiniz Belirleyin.&lt;/p&gt;

&lt;p&gt;Modelin &lt;code&gt;class Meta:&lt;/code&gt; kısmında &lt;code&gt;db_table&lt;/code&gt; kullanarak tablo isimlerini Django
yerine siz belirleyebilirsiniz. Bu sayede daha kısa tablo adları olur ve
siz daha hakim olursunuz database’e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'core'&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'customer'&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'customer'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'customers'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;“created_at” ve “updated_at”&lt;/h3&gt;

&lt;p&gt;Mutlaka Modelin &lt;code&gt;created_at&lt;/code&gt; ve &lt;code&gt;updated_at&lt;/code&gt; field’ları olsun.&lt;/p&gt;

&lt;p&gt;Genelde benim &lt;code&gt;base.py&lt;/code&gt; diye bir dosyam ve onun içinde tüm modellerde ortak
olarak kullanmayı düşündüğüm alanları kapsayan bir &lt;code&gt;abstract&lt;/code&gt; model olur:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyBaseModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'created at'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'updated at'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Duruma göre &lt;code&gt;deleted_at&lt;/code&gt;, &lt;code&gt;is_active&lt;/code&gt; gibi alanlar da olabilir. İlgili
modellerimi bundan türetirim.&lt;/p&gt;

&lt;h3&gt;İlişki Belirtmek&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Article&lt;/code&gt; diye bir modeliniz var, &lt;code&gt;Article&lt;/code&gt; içinde &lt;code&gt;User&lt;/code&gt; modeline &lt;code&gt;ForeignKey&lt;/code&gt;
tanımlayacaksınız. Dolayısıyla &lt;code&gt;User&lt;/code&gt; modelini içeri &lt;code&gt;import&lt;/code&gt; etmeniz gerekiyor.
&lt;strong&gt;Circular import&lt;/strong&gt; durumuna düşmemek adına ben genelde tek bir &lt;code&gt;app&lt;/code&gt; altına
tüm modelleri toplarım.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;User&lt;/code&gt; modelini de kendi oluşturduğum &lt;a href="https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#specifying-a-custom-user-model"&gt;Custom User&lt;/a&gt; modelini kullanırım.
Bu sayede hiçbir zaman dışarıdan modeli import etmem. Peki nasıl tanımlarım?&lt;/p&gt;

&lt;p&gt;Normalde &lt;code&gt;user = models.ForeignKey(User, ...)&lt;/code&gt; şeklinde &lt;code&gt;User&lt;/code&gt;’ı import etmek
yerine, &lt;code&gt;to=&amp;#39;User&amp;#39;&lt;/code&gt; ile &lt;strong&gt;shorthand reference&lt;/strong&gt; kullanıyorum, yani;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şeklinde. &lt;code&gt;to=&amp;#39;String&amp;#39;&lt;/code&gt; de olur;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;City&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Country'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'cities'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_query_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'city'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'country'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bu sayede model import işleriyle uğraşmam. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;28 Ağustos 2021&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sevgili &lt;a href="https://www.linkedin.com/in/muhammet-bahad%C4%B1r-kacar-698019187/"&gt;Muhammet Bahadır Kacar&lt;/a&gt;
beni ikaz etti. Ben gözden kaçırmışım. Eğer &lt;code&gt;application.Model&lt;/code&gt; şeklinde
&lt;strong&gt;string&lt;/strong&gt; olarak verilirse başka bir app’den de bu yöntemle &lt;strong&gt;lazy/short-hand
ref&lt;/strong&gt; olarak &lt;a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#foreignkey"&gt;import&lt;/a&gt; edilebiliyor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Permissions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Group'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'user_set'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_query_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'groups'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user_permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'auth.Permission'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;- buradaki gibi...
&lt;/span&gt;        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'user_set'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_query_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user permissions'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;“related_name” ve “related_query_name”&lt;/h3&gt;

&lt;p&gt;Mutlaka ilişkili yani &lt;code&gt;ForeignKey&lt;/code&gt; ya da &lt;code&gt;ManyToMany&lt;/code&gt; field’lara &lt;code&gt;related_name&lt;/code&gt;
ve &lt;code&gt;related_query_name&lt;/code&gt; tanımı yapın. &lt;code&gt;related_name&lt;/code&gt; o modeldeyken tersten üst
modele erişim sağlar.&lt;/p&gt;

&lt;p&gt;Yani, elimde &lt;code&gt;Country&lt;/code&gt; instance’ı varsa, ben &lt;code&gt;country.cities.filter()&lt;/code&gt; şeklinde
sorgu yapabilirim. Aksi halde Django’nun otomatik eklediği &lt;code&gt;model_set&lt;/code&gt; üzerinden
gitmem gerekir.&lt;/p&gt;

&lt;p&gt;Aynı şekilde, &lt;code&gt;Country.objects.filter(city__name=&amp;#39;xxx&amp;#39;)&lt;/code&gt; şeklinde &lt;code&gt;related_query_name&lt;/code&gt;
kullanarak sorgu yapabilirim.&lt;/p&gt;

&lt;p&gt;Keza &lt;code&gt;related_name&lt;/code&gt; değeri de çoğul olarak verilmelidir. Yani &lt;code&gt;ForeignKey&lt;/code&gt; ilişkisi
aslında &lt;strong&gt;One to Many&lt;/strong&gt; yani bir &lt;code&gt;Country&lt;/code&gt;’nin birden fazla şehri olabilir 
mantığında olduğu için, o &lt;code&gt;Country&lt;/code&gt;’nin &lt;code&gt;cities&lt;/code&gt; yani şehirleri vardır.&lt;/p&gt;

&lt;h3&gt;“ForeignKey” için “unique=True” Kullanmayın&lt;/h3&gt;

&lt;p&gt;Çünkü bu iş için &lt;code&gt;OneToOneField&lt;/code&gt; var.&lt;/p&gt;

&lt;h3&gt;Gerektiğinde “NullBooleanField” Kullanın&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;models.BooleanField(null=True)&lt;/code&gt; yerine &lt;code&gt;models.NullBooleanField()&lt;/code&gt; kullanın.&lt;/p&gt;

&lt;h3&gt;“ObjectDoesNotExist” Yerine “Model.DoesNotExist”&lt;/h3&gt;

&lt;p&gt;Kayıt yoksa &lt;code&gt;django.core.exceptions&lt;/code&gt;’da &lt;code&gt;ObjectDoesNotExist&lt;/code&gt; exception’ı
yakalamak yerine modelin &lt;code&gt;Model.DoesNotExist&lt;/code&gt; exception’ını yakalamak daha
iyi bir yöntem. Bazı özel durumlar dışında &lt;code&gt;Model.DoesNotExist&lt;/code&gt; kullanın.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;creator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;user_model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotExist&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;CommandError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'email (%s) does not exists'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;“choices” Kullanımı&lt;/h3&gt;

&lt;p&gt;Model için &lt;code&gt;choices&lt;/code&gt; kullanmanız gerektiğinde ya aşağıdaki gibi ya da
yeni gelen &lt;a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#enumeration-types"&gt;Enumeration types&lt;/a&gt;’ı kullanabilirsiniz. Açıkcası ben henüz
Enumeration types kullanmadım, eski yöntem kolayıma geliyor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_OFFLINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_ONLINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_DELETED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_DRAFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_OFFLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'offline'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_ONLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'online'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_DELETED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'deleted'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STATUS_DRAFT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'draft'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATUS_ONLINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Daha detaylı bilgi için &lt;a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#choices"&gt;tıklayabilirsiniz&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Alan Adındaki Fuzuli Model İsmi&lt;/h3&gt;

&lt;p&gt;Eğer &lt;code&gt;User&lt;/code&gt; diye bir model varsa, &lt;code&gt;user_status = models.IntegerField(...)&lt;/code&gt;
diye bir field yerine, &lt;code&gt;status = models.IntegerField(...)&lt;/code&gt; şeklinde field’ı
tanımlamak daha mantıklıdır. Boşuna tekrar yapmamak lazım.&lt;/p&gt;

&lt;h3&gt;“models.py” Yerine “models/” Paketi&lt;/h3&gt;

&lt;p&gt;Model dosyası uzar gider, içinde hareket etmek zorlaşır. Bu bakımdan ben
help modelleri &lt;code&gt;models&lt;/code&gt; paketi içinde tanımlarım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;models/
    __init__.py
    user.py
    post.py
    comment.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ve &lt;code&gt;__init__.py&lt;/code&gt; içinde de;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.user&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.post&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Model dosyası içinde de nelerin importable olduğunu yazarım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'City'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;City&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Güvenli “save()”&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'force_update'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'force_insert'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'force_insert'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'force_update'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Index Eklemek&lt;/h3&gt;

&lt;p&gt;Sorgu yapmayı düşündüğünüz field’ları mutlaka index’leyin ama şunu da unutmayın
ne kadar index o kadar büyük database. Eğer mümkünse index için &lt;code&gt;condition&lt;/code&gt; da
tanımlayın. Aşağıdaki örneği &lt;strong&gt;DjangoCon&lt;/strong&gt; sunumlarından birinde görmüştüm.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;indexes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'unshipped_orders'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pk'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_shipped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; değeri olan query’ler hızlanır&lt;/li&gt;
&lt;li&gt;Sadece gönderilmemiş (&lt;em&gt;unshipped&lt;/em&gt;) olanlar index’lenir&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keza database katmanında da validasyon için;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MonthlyBudget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;CheckConstraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;month__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'check_valid_month'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Ay değeri 1-12 (&lt;em&gt;inclusive&lt;/em&gt;) olur ve &lt;strong&gt;13&lt;/strong&gt; olamaz, bu da database
katmanında bir kontrol/validasyon sağlar&lt;/li&gt;
&lt;li&gt;Özellikle &lt;code&gt;bulk_update()&lt;/code&gt; işleri için çok işe yarar.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;“ManyToMany” için Kendi Tablonuzu Kullanın&lt;/h2&gt;

&lt;p&gt;Eğer &lt;code&gt;ManyToMany&lt;/code&gt; field kullanıyorsanız, Django otomatik olarak gizli bir
tablo oluşturur. Örneğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'customers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_query_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'customer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gibi bir model varsa, Django yeni bir tablo yapar, buna &lt;strong&gt;Associative Table&lt;/strong&gt;
denir ve orada sadece &lt;code&gt;Customer ID&lt;/code&gt; ve &lt;code&gt;User ID&lt;/code&gt; tutar&amp;hellip; Sizin bu tabloda
başka hiçbir kontrolünüz yoktur. Ne migration seviyesinde ne de sorgu
seviyesinde kontrol hep Django’da olur.&lt;/p&gt;

&lt;p&gt;Peki ek bir field daha gerekse ne olacak? Yani &lt;code&gt;Customer ID&lt;/code&gt;, &lt;code&gt;User ID&lt;/code&gt; ve
&lt;code&gt;Is Admin?&lt;/code&gt; tutmanız gerekse ne olacak? İşte bu durumlar için &lt;code&gt;through&lt;/code&gt;
ve &lt;code&gt;through_fields&lt;/code&gt; ile ara tabloyu kendimiz oluşturabiliriz.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'CustomerMembership'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;through_fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'customer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'customers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_query_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'customer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerMembership&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Customer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;is_admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'customer admin status'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ara tablo &lt;code&gt;CustomerMembership&lt;/code&gt; modelinde tanımlandı. Kontrol tamamen bizde.
Hatta bu modelin &lt;code&gt;save()&lt;/code&gt;’ine istersek ek bir şeyler bile takabiliriz. Neticede
bu artık bir model&amp;hellip;&lt;/p&gt;

&lt;p&gt;Keza Django Admin’de de çok güzel bir şekilde kullanabiliriz:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerInlineAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TabularInlineAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- bu kısım!
&lt;/span&gt;    &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;autocomplete_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'customer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomerAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'__str__'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;autocomplete_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;inlines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CustomerInlineAdmin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Özetle, üşenmeyin, &lt;code&gt;ManyToManyField&lt;/code&gt; durumunda &lt;code&gt;through&lt;/code&gt; kullanın :)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Son olarak, modeli planlarken yapacağınız sorguları da hayal edin. Örneğin
sürekli tarih ile ilgili bir sorgu yapacaksınız. Yılı 2020 olan kayıtları
getir ya da sürekli yıla göre rapor alıyorsunuz.&lt;/p&gt;

&lt;p&gt;Modelin &lt;code&gt;created_at&lt;/code&gt; alanında sürekli &lt;code&gt;date lookup&lt;/code&gt; yapmak yerine, belkide
modele bir &lt;code&gt;year&lt;/code&gt; field’ı eklemek ve bunu &lt;code&gt;IntegerField&lt;/code&gt; yapmak ve index
koymak sorgularınızı aşırı derecede hızlandırabilir. Database içinde
tarih hesapları yapmak yerine sadece sayı sorgusu yapmak çok daha hızlı
ve az maliyetlidir.&lt;/p&gt;

&lt;p&gt;Belki ay, gün için bile ek bir &lt;code&gt;IntegerField&lt;/code&gt; eklenebilir. Yani ne sorgulayacağınızı
mutlaka planlayın&amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>İstediğiniz Yerden Go Kodunu Çalıştırabilirsiniz</title>
    <link rel="alternate" href="https://ugur.ozyilmazel.com/blog/tr/2021/05/27/istediginiz-yerden-go-kodunu-calistirabilirsiniz/"/>
    <id>https://ugur.ozyilmazel.com/blog/tr/2021/05/27/istediginiz-yerden-go-kodunu-calistirabilirsiniz/</id>
    <published>2021-05-27T18:35:00+03:00</published>
    <updated>2025-03-10T09:19:43+03:00</updated>
    <author>
      <name>Uğur “vigo” Özyılmazel</name>
    </author>
    <content type="html">&lt;p&gt;Dikkatimi çekti, pek çok kişi bu özelliğin ya farkında değil ya da bilmiyor.
Ben de yakın zamanda tam olarak öğrenip konuyu anladım ve çok mutlu oldum.&lt;/p&gt;

&lt;p&gt;Yeni bir projeye başlayacağım zaman ilk iş;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;go &lt;span class="nb"&gt;env &lt;/span&gt;GOPATH&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/src/github.com/vigo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;yapmak olurdu ve ilgili repoyu bu dizin altında açardım. Ne zaman ki golang’e
modül desteği geldi, bu sayede artık kodun bulunduğu yerin pek bir önemi
kalmadı.&lt;/p&gt;

&lt;p&gt;İçinde &lt;code&gt;go.mod&lt;/code&gt; olan her proje sıkıntısız olarak herhangi bir yerden
çalışabiliyor.&lt;/p&gt;

&lt;p&gt;Yeni bir projeye başlayacağım zaman artık;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Development/Golang
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-project
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-project/
&lt;span class="nv"&gt;$ &lt;/span&gt;go mod init github.com/vigo/my-project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şeklinde başıyorum. Hatta daha da fantazi yapalım;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-project &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;go mod init foo/bar/my-project
go: creating new go.mod: module foo/bar/my-project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hemen bakalım &lt;code&gt;go.mod&lt;/code&gt; dosyasına;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sonrasında &lt;code&gt;touch main.go&lt;/code&gt; ile dosyayı oluşturalım ve içini aşağıdaki gibi
dolduralım;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;şimdi çalıştıralım:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go run &lt;span class="nb"&gt;.&lt;/span&gt;
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Evet, proje &lt;code&gt;/tmp/&lt;/code&gt; dizini altında bir yerde bile kolaylıkla çalıştı. Tabii ki
paket ismi olarak &lt;code&gt;foo/bar/my-project&lt;/code&gt; yapmak iyi bir fikir değil, sadece
bunun bile olabileceğini göstermek istedim.&lt;/p&gt;

&lt;p&gt;Siz yeni projelerinizde mutlaka &lt;code&gt;repo/user/paket&lt;/code&gt; formatından şaşmayın!&lt;/p&gt;
</content>
  </entry>
</feed>
